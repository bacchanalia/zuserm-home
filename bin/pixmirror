#!/usr/bin/perl
#Copyright 2011,2012 by Elliot Wolk
#This is free software, released under the GPLv3
use strict;
use warnings;

use IPC::Run qw(run);

my $IS_THREADED = eval 'use threads; use threads::shared; 1';
my $DEFAULT_MAX_THREADS = 4;

sub cleanupFailures($$);
sub findImages($);
sub statImage($);
sub getInfo($);
sub checkInfo($$);
sub handleImage($$$$);
sub jhead($@);
sub getNewPix($);
sub isOrientMatch($$);
sub getResizePercent($$$$);
sub runMogrify($@);
sub getOrientation($$);
sub ipcRun(@);

my @exts = qw(jpg jpeg png);
my $mogrifyExec = 'mogrify';
my $identifyExec = 'identify';
my $jheadExec = 'jhead';

my $targetX = 1920;
my $targetY = 1080;
my $targetOrientation = getOrientation $targetX, $targetY;

my $orientSwap = 0;
my $rotate = 0;

my $downscaleSharpenPercentThreshold = 90;
my $unsharpArg = "0x0.5";

my $pad = 0;
my $padColor = 'black';
my $padGravity = 'center';
my $okGravity = join "|", split /\n+/, `$mogrifyExec -list gravity 2>/dev/null`;
my $threadCount = $DEFAULT_MAX_THREADS;

my $usage = "Usage:
  $0 [<OPTS>] <SRC_DIR> <DEST_DIR>
    Create a recursive copy of images from <SRC_DIR> to <DEST_DIR>,
      resized to fit <TARGET_X>x<TARGET_Y>, preserving original aspect ratios.

    The original filesize and modified timestamp are recorded for each file
      in a file with the same path as the original, appended with \".info\".
      If copies already exist on the target, they are not replaced unless the
      mtime or filesize of the original has changed, even if new arguments
      are given.

    If the image is being downscaled to less than
      $downscaleSharpenPercentThreshold\%, run '-unsharp $unsharpArg'
      after resizing to slightly sharpen the image.

    Mirrored images are auto-rotated from EXIF metadata using '$jheadExec'

  <OPTS>
    --size=<TARGET_X>x<TARGET_Y>   {default is ${targetX}x${targetY}}
      target width and height in pixels {or height and width if src y>x}

    --orient  --no-orient          {default is --no-orient}
      Does not rotate the image.
      Permits the image to instead optionally fit in a <TARGET_Y>x<TARGET_X>
        frame, in order to be larger than if it fix in <TARGET_X>x<TARGET_Y>.
      If <TARGET_X>x<TARGET_X> is landscape-oriented and the source image
        is portrait-oriented {or vice-versa},
        <TARGET_X> and <TARGET_Y> are swapped.
      Landscape means x>y and portrait means y>=x.
      By default, the orientation is $targetOrientation {${targetX}x{$targetY}}
        {and can be changed with --size=<TARGET_X>x<TARGET_Y>}

    --rotate  --no-rotate          {default is --no-rotate}
      Implies --orient. Instead of just scaling like --orient,
        actually rotate 90 degress clockwise if the orientations do not match.
      This is done after '$jheadExec' auto-rotation

    --pad  --no-pad                {default is --no-pad}
      Produce images that are exactly <TARGET_X>x<TARGET_Y> by padding
        with a solid black border on top/bottom or left/right.

    --pad-color=<COLOR>            {default is $padColor}
      when --pad is given, set the background to <COLOR>

    --pad-gravity=<GRAVITY>        {default is $padGravity}
      when padding, use gravity=<GRAVITY>
      <GRAVITY> is one of {$okGravity}
      e.g.: $0 --size=5000x50 --pad --pad-gravity=South
               append 4950 rows of black pixels to the top of a 50x50 image

    --no-threads  --nothreads      {default is --threads=$DEFAULT_MAX_THREADS}
      synonym for --threads=1

    --threads=THREAD_COUNT         {default is $DEFAULT_MAX_THREADS}
      use up to THREAD_COUNT threads. if THREAD_COUNT is 1, do not use threads.
      if perl was not built with threads, this is ignored.
        (threads " . ($IS_THREADED ? "ARE" : "are NOT") . " enabled)
      default is $DEFAULT_MAX_THREADS
";

sub main(@){
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^--size=(\d+)x(\d+)$/){
      $targetX = $1+0;
      $targetY = $2+0;
      $targetOrientation = getOrientation $targetX, $targetY;
    }elsif($arg =~ /^--orient$/){
      $orientSwap = 1;
    }elsif($arg =~ /^--no-orient$/){
      $orientSwap = 0;
    }elsif($arg =~ /^--rotate$/){
      $rotate = 1;
    }elsif($arg =~ /^--no-rotate$/){
      $rotate = 0;
    }elsif($arg =~ /^--pad$/){
      $pad = 1;
    }elsif($arg =~ /^--no-pad$/){
      $pad = 0;
    }elsif($arg =~ /^--pad-color=(\w+)$/){
      $padColor = $1;
    }elsif($arg =~ /^--pad-gravity=($okGravity)$/i){
      $padGravity = $1;
    }elsif($arg =~ /^(--nothreads|--no-threads)$/){
      $threadCount = 1;
    }elsif($arg =~ /^--threads=(\d+)$/){
      $threadCount = $1;
      die "invalid THREAD_COUNT=$threadCount\n" if $threadCount <= 0;
    }else{
      die $usage;
    }
  }

  my $srcDir = shift;
  my $destDir = shift;

  die $usage if not defined $srcDir or not defined $destDir or @_ > 0;

  system "mkdir '$destDir' 2>/dev/null" if not -e $destDir;
  die "src '$srcDir' is not a directory" if not -d $srcDir;
  die "dest '$destDir' is not a directory" if not -d $destDir;

  system "which $mogrifyExec > /dev/null";
  die "Could not exec $mogrifyExec\n" if $? != 0;
  system "which $identifyExec > /dev/null";
  die "Could not exec $identifyExec\n" if $? != 0;

  my @srcImgs = findImages $srcDir;
  my $total = @srcImgs;

  print "running stat on $total images:\n";
  my %srcInfos;
  for my $img(@srcImgs){
    $srcInfos{$img} = statImage "$srcDir/$img";
  }

  print "comparing existing pixmirror info to src info:\n";
  my @destImgs = findImages $destDir;
  my %okImgs;
  for my $img(@destImgs){
    if(not checkInfo($srcInfos{$img}, "$destDir/$img.info")){
      print "removing $destDir/$img and $destDir/$img.info\n";
      system "rm", "$destDir/$img";
      system "rm", "$destDir/$img.info";
    }else{
      $okImgs{$img} = 1;
    }
  }

  @srcImgs = grep {not defined $okImgs{$_}} @srcImgs;
  my $toConvert = @srcImgs;
  my $skipped = $total - $toConvert;

  print "\nconverting $toConvert images {skipped $skipped}\n";

  if($IS_THREADED and $threadCount > 1){
    my %status;
    my $abort = 0;
    share(\%status);
    share(\$abort);

    my @threadChunks;
    my $threadChunk = undef;
    my $size = @srcImgs/$threadCount;
    for my $img(@srcImgs){
      if(not defined $threadChunk){
        $threadChunk = [];
        push @threadChunks, $threadChunk;
      }
      push @$threadChunk, $img;
      if(@threadChunks < $threadCount and @$threadChunk >= $size){
        $threadChunk = undef;
      }
    }

    $SIG{'INT'} = sub {
      $abort = 1;
    };

    my @threads;
    for my $chunk(@threadChunks){
      my $t = threads->create(sub {
        $SIG{'INT'} = sub {
          $abort = 1;
        };
        for my $img(@$chunk){
          $status{$img} = 0;
          handleImage $img, $srcDir, $destDir, $srcInfos{$img};
          $status{$img} = 1;
          return if $abort;
        }
      });
      push @threads, $t;
    }

    for my $t(@threads){
      $t->join();
    }

    cleanupFailures $destDir, \%status;
  }else{
    for my $img(@srcImgs){
      handleImage $img, $srcDir, $destDir, $srcInfos{$img};
    }
  }

  print "\n\nremoving empty dirs\n";
  system "cd \"$destDir\" && find -mindepth 1 -depth -type d -empty -delete";
}

sub cleanupFailures($$){
  my ($destDir, $status) = @_;

  for my $img(keys %$status){
    if($$status{$img} == 0){
      print STDERR "\nFAILED: $img\n";
      my @files = ("$destDir/$img", "$destDir/$img.info");
      @files = grep {-f $_} @files;
      if(@files == 0){
        print STDERR "  no temp files to cleanup\n";
      }else{
        print STDERR "  cleaning up tmp files: @files\n";
        system "rm", "-f", @files;
      }
    }
  }
}

sub findImages($){
  my $dir = shift;
  my @findArgs = join " -or ", map {"-iname '*.$_'"} @exts;

  my @imgs = `cd $dir; find @findArgs`;
  map {chomp} @imgs;
  return sort @imgs;
}

sub statImage($){
  my $img = shift;
  my @stat = stat $img;
  die "failed stat on '$img'\n" if @stat != 13;

  my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
    $atime,$mtime,$ctime,$blksize,$blocks) = @stat;
  return "$size|$mtime\n";
}

sub checkInfo($$){
  my ($srcInfo, $destInfoFile) = @_;
  if(not defined $srcInfo or not -e $destInfoFile){
    return 0;
  }

  open FH, "< $destInfoFile\n";
  my $destInfo = join '', <FH>;
  close FH;
  return $destInfo eq $srcInfo;
}

sub getInfo($){
  my $file = shift;
  $file =~ s/'/'\\''/g;
  my $info = `identify -verbose '$file'`;
  my ($format, $x, $y);
  if($info =~ /^\s*Format: (\w+)/m){
    $format = $1;
  }
  if($info =~ /^\s*Geometry: (\d+)x(\d+)/m){
    ($x, $y) = ($1, $2);
  }
  if(not defined $format or not defined $x or not defined $y){
    die "Error getting geometry/format using imagemagick: identify $file\n";
  }
  return {format=>$format, x=>$x, y=>$y};
}

sub handleImage($$$$){
  my ($img, $srcDir, $destDir, $statInfo) = @_;

  my $parent = "$destDir/$img";
  $parent =~ s/\/[^\/]*$/\//;
  system "mkdir", "-p", $parent;

  system "cp", "-a", "--reflink=auto", "$srcDir/$img", "$destDir/$img";

  my $info = getInfo "$destDir/$img";
  my $isJpeg = $$info{format} =~ /JPEG/i;
  my %jheadAtts;
  if($isJpeg){
    my %atts = jhead "$destDir/$img", "-autorot";
    %jheadAtts = (%jheadAtts, %atts);
    $info = getInfo "$destDir/$img";
  }

  my ($oldX, $oldY) = ($$info{x}, $$info{y});
  my ($newX, $newY) = ($targetX, $targetY);

  my @args;
  if($rotate and not isOrientMatch $oldX, $oldY){
    @args = (@args, "-rotate", 90);
    ($oldX, $oldY) = ($oldY, $oldX);
  }elsif($orientSwap and not isOrientMatch $oldX, $oldY){
    ($newX, $newY) = ($newY, $newX);
  }

  my $percent = getResizePercent $newX, $newY, $oldX, $oldY;
  @args = (@args, "-resize", "$percent%");

  if($percent < $downscaleSharpenPercentThreshold){
    @args = (@args, "-unsharp", $unsharpArg);
  }

  if($pad){
    @args = (@args,
      "-gravity", $padGravity,
      "-background", $padColor,
      "-extent", "${newX}x${newY}",
    );
  }

  runMogrify "$destDir/$img", @args;

  if($isJpeg){
    my %atts = jhead "$destDir/$img", "-norot";
    %jheadAtts = (%jheadAtts, %atts);
  }

  open INFO, "> $destDir/$img.info";
  print INFO $statInfo;
  close INFO;

  system "touch", "$destDir/$img", "--reference=$srcDir/$img";
  system "touch", "$destDir/$img.info", "--reference=$srcDir/$img";

  my $fmt = "ok";
  $fmt .= " (mod)" if defined $jheadAtts{'modified'};
  $fmt .= " (unknown orient)" if $jheadAtts{'unknown-orient'};
  $fmt .= ": $img";
  print "$fmt\n";
}

sub jhead($@){
  my ($file, @args) = @_;
  my $res = ipcRun $jheadExec, @args, $file;
  my $isModified = 0;
  my $isUnknownOrientation = 0;
  for my $line(split /\n/, $$res{out}){
    next if $line =~ /^\s*$/;
    if($line =~ /^Modified: $file$/){
      $isModified = 1;
    }else{
      print "$line\n";
    }
  }
  for my $line(split /\n/, $$res{err}){
    next if $line =~ /^\s*$/;
    if($line =~ /^Nonfatal Error : '$file' Unknown orientation tag$/){
      $isUnknownOrientation = 1;
    }else{
      print STDERR "$line\n";
    }
  }

  my %atts;
  $atts{'modified'} = 1 if $isModified;
  $atts{'unknown-orient'} = 1 if $isUnknownOrientation;
  return %atts;
}

sub isOrientMatch($$){
  my ($oldX, $oldY) = @_;
  return getOrientation($oldX, $oldY) eq $targetOrientation;
}

sub getResizePercent($$$$){
  my ($newX, $newY, $oldX, $oldY) = @_;
  my $ratio;

  my $ratio1 = $newX / $oldX;
  my $ratio2 = $newY / $oldY;
  $ratio = $ratio1 < $ratio2 ? $ratio1 : $ratio2;

  my $percent = sprintf '%.5f', $ratio*100;

  return $percent;
}

sub runMogrify($@){
  my ($file, @args) = @_;

  system $mogrifyExec, @args, $file;
  die "failed to run mogrify on $file {@args}\n" if $? != 0;
}

sub getOrientation($$){
  my ($x, $y) = @_;
  return $x > $y ? "landscape" : "portrait";
}

sub ipcRun(@){
  my @cmd = @_;
  my ($out, $err);
  my $success = run [@cmd], '>', \$out, '2>', \$err;
  return {out=>$out, err=>$err, success=>$success};
}

&main(@ARGV);
