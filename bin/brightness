#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

sub ceil($);
sub getBrightness();
sub setBrightness($$);
sub getBrightnessXrandr();
sub setBrightnessXrandr($$);
sub ensureXrandrDevs();

my $lastFile = "/tmp/brightness";
my $lastFileXrandr = "/tmp/brightness-xrandr";

my $disableXbacklight = 0;
my $xbacklightFailureMessage = "No outputs have backlight property";
my $display = ":0";
my $xrandrDevs = undef;

my @brackets = (0, 10, 34, 67, 80, 100);

my $usage = "Usage:
    $0 [--xrandr]            prints brightness
    $0 [--xrandr] up|down    jump between: @brackets
    $0 [--xrandr] percent    set brightness to percent, record in $lastFile
    $0 [--xrandr] last       set brightness to value read from $lastFile
    $0 [--xrandr] system     remove $lastFile

  xbacklight wrapper that stores previous settings in $lastFile

  if xbacklight prints \"$xbacklightFailureMessage\",
      xrandr is used to control brightness instead {in software}
      if xrandr is used, brightness is written to $lastFileXrandr
      instead of $lastFile

  --xrandr
    force use of xrandr instead of xbacklight

  note: when brightness percentage is not an integer,
    xbacklight -set `xbacklight -get`
  lowers the brightness one notch

  however, brightnesses printed by $0 are rounded up, so:
    $0 `$0`
  should NOT change the brightness
";

sub main(@){
  if(@_ > 0 and $_[0] =~ /^--xrandr/){
    shift;
    $disableXbacklight = 1;
  }

  my $arg = shift;
  die $usage if @_ != 0;

  if(not defined $arg){
    print getBrightness() . "\n";
  }elsif($arg =~ /^(up|down)$/){
    my $b = getBrightness;
    @brackets = reverse @brackets if $arg eq 'down';
    my ($top, $bot) = $disableXbacklight ? ($b+2, $b-2) : ($b, $b);
    for my $bracket(@brackets){
      if(($arg eq 'up' and $bracket > $top) or ($arg eq 'down' and $bracket < $bot)){
        setBrightness $bracket, 0;
        last;
      }
    }
  }elsif($arg =~ /^(last)$/){
    if(-e $lastFile or -e $lastFileXrandr){
      my $brightness = getBrightness();
      my $last = $disableXbacklight ? `cat $lastFileXrandr` : `cat $lastFile`;
      chomp $last;
      if($last =~ /^\d+$/){
        my $diff = $brightness - $last;
        $diff *= -1 if $diff < 0;
        my $buffer = $disableXbacklight ? 2 : 0;
        if($diff > $buffer){
          setBrightness $last, 1;
        }
      }
    }
  }elsif($arg =~ /^(system)$/){
    system "rm", "-f", $lastFile, $lastFileXrandr;
  }elsif($arg =~ /^(\d+(?:\.\d+)?)$/){
    setBrightness $arg, 0;
  }else{
    die $usage;
  }
}

sub ceil($){
  chomp $_[0];
  my $i = int($_[0]);
  my $d = $_[0] - $i;
  return $i + ($d > 0 ? 1 : 0);
}

sub getBrightness(){
  if($disableXbacklight){
    return getBrightnessXrandr;
  }else{
    my $b = `DISPLAY=$display xbacklight -get 2>&1`;
    if($b =~ /^$xbacklightFailureMessage/){
      print STDERR "$xbacklightFailureMessage\nusing xrandr instead\n";
      $disableXbacklight = 1;
      return getBrightnessXrandr();
    }

    return ceil $b;
  }
}

sub setBrightness($$){
  my $target = ceil $_[0];
  my $softUpdate = $_[1];
  print getBrightness() . " => $target\n";
  if($disableXbacklight){
    setBrightnessXrandr $target, $softUpdate;
  }else{
    system "echo $target > $lastFile" if not $softUpdate;
    system "DISPLAY=$display xbacklight -time 0 -set $target";
  }
}

sub getBrightnessXrandr(){
  ensureXrandrDevs();
  my @devs = sort keys %$xrandrDevs;
  if(@devs < 1){
    die "Could not read brightness from any xrandr dev\n";
  }elsif(@devs > 1){
    die "Too many xrandr devices: @devs\n";
  }

  my $b = $$xrandrDevs{$devs[0]};
  return ceil($b*100)
}

sub setBrightnessXrandr($$){
  my $target = ceil $_[0];
  my $softUpdate = $_[1];
  ensureXrandrDevs();

  my @devs = sort keys %$xrandrDevs;
  if(@devs < 1){
    die "Could not set brightness on any xrandr dev\n";
  }elsif(@devs > 1){
    die "Too many xrandr devices: @devs\n";
  }

  system "echo $target > $lastFileXrandr" if not $softUpdate;
  $target /= 100;

  system "DISPLAY=$display xrandr --output $devs[0] --brightness $target";
}

sub ensureXrandrDevs(){
  return if defined $xrandrDevs;
  $xrandrDevs = {};

  my $curDev = undef;
  for my $line(`DISPLAY=$display xrandr --verbose`){
    if($line =~ /^([a-zA-Z0-9]+) (connected|disconnected)/){
      if($2 eq "connected"){
        $curDev = $1;
      }else{
        $curDev = undef;
      }
    }elsif($line =~ /^\s*Brightness: ([0-9\.]+)$/ and defined $curDev){
      $$xrandrDevs{$curDev} = $1;
    }
  }
}

&main(@ARGV);
