#!/usr/bin/perl
use strict;
use warnings;

sub ceil($);
sub getBrightness();
sub setBrightness($$);

my $lastFile = "/tmp/brightness";

my @brackets = (0, 34, 67, 80, 100);

my $usage = "Usage:
    $0            prints brightness
    $0 [up|down]  jump between: @brackets
    $0 percent    set brightness to percent, record in $lastFile
    $0 last       set brightness to value read from $lastFile
    $0 system     remove $lastFile

  xbacklight wrapper

  note: when brightness percentage is not an integer,
    xbacklight -set `xbacklight -get`
  lowers the brightness one notch

  however, brightnesses printed by $0 are rounded up, so:
    $0 `$0`
  should NOT change the brightness
";

sub main(@){
  my $arg = shift;
  die $usage if @_ != 0;
  if(not defined $arg){
    print getBrightness() . "\n";
  }elsif($arg =~ /^(up|down)$/){
    my $b = getBrightness;
    @brackets = reverse @brackets if $arg eq 'down';
    for my $bracket(@brackets){
      if(($arg eq 'up' and $bracket > $b) or ($arg eq 'down' and $bracket < $b)){
        setBrightness $bracket, 0;
        last;
      }
    }
  }elsif($arg =~ /^(last)$/){
    if(-e $lastFile){
      my $brightness = `cat $lastFile`;
      chomp $brightness;
      if($brightness =~ /^\d+$/){
        if($brightness ne getBrightness()){
          setBrightness $brightness, 1;
        }
      }
    }
  }elsif($arg =~ /^(system)$/){
    system "rm", "-f", $lastFile;
  }elsif($arg =~ /^(\d+(?:\.\d+)?)$/){
    setBrightness $arg, 0;
  }else{
    die $usage;
  }
}

sub ceil($){
  chomp $_[0];
  my $i = int($_[0]);
  my $d = $_[0] - $i;
  return $i + ($d > 0 ? 1 : 0);
}

sub getBrightness(){
  return ceil `xbacklight -get`;
}
sub setBrightness($$){
  my $target = ceil $_[0];
  my $softUpdate = $_[1];
  system "echo $target > $lastFile" if not $softUpdate;
  print getBrightness() . " => $target\n";
  system "xbacklight -time 0 -set $target";
}

&main(@ARGV);
