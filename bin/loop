#!/usr/bin/perl
use strict;
use warnings;

my $usage = "Usage:
  $0 -h|--help
     print this usage
  $0 [-s|-f|-d] [DELAY] COMMAND
     run 'COMMAND' with shell interpolation repeatedly
  $0 [-s|-f|-d] [DELAY] EXEC [ARG ARG ..]
     run 'EXEC ARG ARG ..' without interpolation repeatedly
     note that normal shell interpolation still happens when running $0
  e.g.:
    $0 'ls *'
      while [ 1 ]; do sh -c 'ls *'; sleep 1; done
      {* is interpolated each time}
    $0 ls *
      x=\$(echo *); while [ 1 ]; do ls \$x; sleep 1; done
      {* is interpolated once, up front}

  DELAY   how long to sleep between commands, in (fractional) seconds
            non-negative real number, e.g.: '30', '0.001', '2.5', '0'
            '0' means do not sleep
            default is '1'
  -d      run 'date' before each invokation
  -s      run until success
            do not rerun 'command' after a zero exit code
  -f      run until failure
            do not rerun 'command' after a non-zero exit code
";

sub runOrDie(@);

sub main(@){
  my $untilSuccess = 0;
  my $untilFailure = 0;
  my $printDate = 0;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-s)$/){
      $untilSuccess = 1;
    }elsif($arg =~ /^(-f)$/){
      $untilFailure = 1;
    }elsif($arg =~ /^(-d)$/){
      $printDate = 1;
    }else{
      die $usage;
    }
  }

  my $delay = 1;
  $delay = shift if @_ > 0 and $_[0] =~ /^\d+(?:\.\d+)?$/;

  die $usage if @_ == 0;

  while(1){
    runOrDie "date" if $printDate;

    system @_;

    my $exitCode = $?;
    if($exitCode == 0){
      exit $exitCode if $untilSuccess;
    }else{
      exit $exitCode if $untilFailure;
    }

    runOrDie "sleep", $delay if $delay > 0;
  }
}

sub runOrDie(@){
  system @_;
  exit $? if $? != 0;
}

&main(@ARGV);
