#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw(min max);

my $numLen = 3;

sub copyNum($$);
sub removeNum($$);
sub getSrcNums($);
sub getCurrentNums($);
sub getFiles($$);
sub getAlbumHistoryNums($);
sub setPlaylist($$);
sub getRemoteCmd($);
sub elem($@);
sub run(@);

my $serials = [
  {
    ipmagic     => "n9",
    ipmagicUser => "user",
    playlist    => "books",
    album       => "PodCastle",
    srcLib      => "books",
    destLib     => "b",
    srcRelPath  => "PodCastle",
    destRelPath => "podcastle",
    maxSize     => 10,
    chunkSize   => 5,
  },
];

sub main(@){
  for my $serial(@$serials){
    my $origPlaylist = setPlaylist $serial, $$serial{playlist};

    my @srcNums = getSrcNums $serial;
    my @curNums = getCurrentNums $serial;
    my @histNums = getAlbumHistoryNums $serial;

    my $maxCur = max @curNums;
    my @remSrcNums = grep {not defined $maxCur or $_ > $maxCur} @srcNums;

    my @curChunkNums = @curNums[0 .. $$serial{chunkSize} - 1];
    my @nextChunkNums = @remSrcNums[0 .. $$serial{chunkSize} - 1];
    @curChunkNums = grep {defined $_} @curChunkNums;
    @nextChunkNums = grep {defined $_} @nextChunkNums;

    my $copyNextChunk = 1;

    if($copyNextChunk){
      if(@nextChunkNums < $$serial{chunkSize}){
        print "skipping $$serial{album}, not enough left to copy\n";
        $copyNextChunk = 0;
      }
    }
    if($copyNextChunk){
      if(@curChunkNums < $$serial{chunkSize}){
        print "skipping $$serial{album}, not enough present to replace\n";
        $copyNextChunk = 0;
      }
    }
    if($copyNextChunk){
      for my $num(@curChunkNums){
        if(not elem $num, @histNums){
          print "skipping $$serial{album}, $num is not in history\n";
          $copyNextChunk = 0;
          last;
        }
      }
    }

    if($copyNextChunk){
      for my $num(@nextChunkNums){
        copyNum $serial, $num;
      }
      for my $num(@curChunkNums){
        removeNum $serial, $num;
      }
      run "klomp-db", "-m", "--force=$$serial{chunkSize}", $$serial{destLib};
      run "klomp-db", "-u", $$serial{destLib};

      if(defined $$serial{ipmagic}){
        my $host = `ipmagic $$serial{ipmagic}`;
        chomp $host;
        if(defined $$serial{ipmagicUser}){
          $host = "$$serial{ipmagicUser}\@$host";
        }
        run "klomp-sync", $host, "--nopresync", $$serial{destLib};
        my @remoteCmd = getRemoteCmd $serial;
        for my $num(@nextChunkNums){
          my $queryLib = "\@$$serial{destLib}";
          my $queryAlbum = "\@l^\"$$serial{album}\"\$";
          my $queryNumber = "\@n^\"$num\"\$";
          my $query = "$queryLib $queryAlbum $queryNumber";
          run @remoteCmd, "klomp", "--append", "'$query'";
        }
      }
    }

    setPlaylist $serial, $origPlaylist;
  }
}

sub copyNum($$){
  my ($serial, $num) = @_;
  my %srcFiles = getFiles $$serial{srcLib}, $$serial{srcRelPath};
  my %destFiles = getFiles $$serial{destLib}, $$serial{destRelPath};
  if(not defined $srcFiles{$num}){
    die "Error: missing $num in $$serial{srcLib}/$$serial{srcRelPath}\n";
  }
  if(defined $destFiles{$num}){
    die "Error: dest file already exists: $destFiles{$num}\n";
  }

  my $destDir = `klomp-lib -l $$serial{destLib}`;
  chomp $destDir;
  $destDir = "$destDir/$$serial{destRelPath}";

  run "cp", "-a", "--reflink=always", $srcFiles{$num}, $destDir;
}

sub removeNum($$){
  my ($serial, $num) = @_;
  my %srcFiles = getFiles $$serial{srcLib}, $$serial{srcRelPath};
  my %destFiles = getFiles $$serial{destLib}, $$serial{destRelPath};
  if(not defined $srcFiles{$num}){
    die "Error: missing $num in $$serial{srcLib}/$$serial{srcRelPath}\n";
  }
  if(not defined $destFiles{$num}){
    die "Error: missing $num in $$serial{destLib}/$$serial{destRelPath}\n";
  }

  my $srcName = $1 if $srcFiles{$num} =~ /(?:^|\/)($num [^\/]*)$/;
  my $destName = $1 if $destFiles{$num} =~ /(?:^|\/)($num [^\/]*)$/;
  if($srcName ne $destName){
    die "Error: mismatched src/dest {$srcFiles{$num} vs $destFiles{$num}}\n";
  }
  if($srcName !~ /^$num/){
    die "Error: file name does not start with $num: $srcName\n"
  }

  run "rm", $destFiles{$num};
}

sub getSrcNums($){
  my ($serial) = @_;
  my %files = getFiles $$serial{srcLib}, $$serial{srcRelPath};
  return sort keys %files;
}

sub getCurrentNums($){
  my ($serial) = @_;
  my %files = getFiles $$serial{destLib}, $$serial{destRelPath};
  return sort keys %files;
}

sub getFiles($$){
  my ($lib, $relPath) = @_;
  my $dir = `klomp-lib -l $lib`;
  chomp $dir;
  $dir = "$dir/$relPath";
  my %numFiles;
  my @files = `find '$dir' -maxdepth 1 -type f`;
  for my $file(@files){
    chomp $file;
    if($file =~ /^$dir\/(\d+)/){
      $numFiles{$1} = $file;
    }
  }
  return %numFiles;
}

sub getAlbumHistoryNums($){
  my ($serial) = @_;
  my @remoteCmd = getRemoteCmd $serial;

  my @nums;
  my @historyLines = `@remoteCmd klomp-info album number [-50,-1]`;
  for my $line(@historyLines){
    if($line =~ /^$$serial{album} (\d+)$/){
      push @nums, $1;
    }
  }
  @nums = map {('0'x($numLen - length $_)) . $_} @nums;

  return sort @nums;
}

sub setPlaylist($$){
  my ($serial, $playlist) = @_;
  my @remoteCmd = getRemoteCmd $serial;

  my $origPlaylist = `@remoteCmd klomp-cmd playlist`;
  chomp $origPlaylist;

  run "@remoteCmd klomp-cmd playlist-main";
  if($playlist ne "main"){
    run "@remoteCmd klomp-cmd playlist $playlist";
  }
  return $origPlaylist;
}

sub getRemoteCmd($){
  my ($serial) = @_;
  my @cmd;
  if(defined $$serial{ipmagic}){
    if(defined $$serial{ipmagicUser}){
      @cmd = ("-u", $$serial{ipmagicUser}, @cmd);
    }
    @cmd = ("ipmagic", $$serial{ipmagic}, @cmd);
  }
  return @cmd;
}

sub elem($@){
  my ($elem, @arr) = @_;
  for my $e(@arr){
    if($e eq $elem){
      return 1;
    }
  }
  return 0;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
