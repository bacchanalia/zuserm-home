#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);
use Date::Parse qw(str2time);
use Date::Format qw(time2str);

sub printBackupSets(@);
sub getRecentBackupSets();
sub parseBackupSets($$);
sub filterLog($$);
sub parseLog();
sub formatBackupSet($);
sub parseSizeMiB($);
sub padl($$);
sub padr($$);
sub formatTime($);

my $dir = "/usr/local/crashplan";
my $guiExec = "$dir/bin/CrashPlanDesktop";
my $engineExec = "$dir/bin/CrashPlanEngine";
my $crashplanJar = "lib/com.backup42.desktop.jar";
my $cliWrapperSrc = "cliwrapper";
my $cliWrapperClass = "com.backup42.desktop.CliWrapper";
my $logFile = "$dir/log/history.log.0";

my $recentLogMillis = 18 * 60 * 60 * 1000; #18hr
my $dateDisplayFormat = "%Y-%m-%d %H:%M";

my @serviceCmds = qw(scan pause resume);
my $okServiceCmds = join "|", @serviceCmds;

my @engineCmds = qw(start stop restart status force-reload);
my $okEngineCmds = join "|", @engineCmds;

my @backupNames = qw(
  backgrounds cameravideos dcim documents email firefox
  games music n9 pictures pidgin records stepmania thunderbird
);
my $okBackupNames = join "|", @backupNames;

my $defaultCmd = "gui";
my $usage = "Usage:
  $0
  $0 -g|--gui
    run '$guiExec'

  $0 -l|--log|log [BACKUP_NAME]
    format recent info from $logFile
    if BACKUP_NAME is given, only show info for that BACKUP_NAME

  $0 $okServiceCmds
    use custom CliWrapper to run the GUI 'CLI' commands in a REAL command line
    run 'cd $dir; java -cp $crashplanJar:$cliWrapperSrc $cliWrapperClass <ARG>'

  $0 $okEngineCmds
    run 'sudo $engineExec <ARG>'
";

sub main(@){
  my $cmd = shift if @_ > 0;
  $cmd = $defaultCmd if not defined $cmd;

  if($cmd =~ /^(-g|--gui|gui)$/ and @_ == 0){
    exec $guiExec;
  }elsif($cmd =~ /^(-l|--log|log)$/ and (@_ == 0 or (@_ == 1 and $_[0] =~ /$okBackupNames/))){
    my $backupName = shift if @_ > 0;
    my @backupSets = getRecentBackupSets();
    @backupSets = grep {$$_{backupName} eq $backupName} @backupSets if defined $backupName;
    printBackupSets @backupSets;
  }elsif($cmd =~ /^($okEngineCmds)$/ and @_ == 0){
    exec "sudo", $engineExec, $cmd;
  }elsif($cmd =~ /^($okServiceCmds)$/ and @_ == 0){
    chdir $dir;
    exec "java", "-cp", "$crashplanJar:$cliWrapperSrc", $cliWrapperClass, $cmd;
  }else{
    die $usage;
  }
}

sub printBackupSets(@){
  for my $backupStatus(("skipped", "complete", "incomplete", "running", "error")){
    print "===$backupStatus===\n";
    for my $backupSet(@_){
      if($$backupSet{backupStatus} eq $backupStatus){
        print formatBackupSet($backupSet);
      }
    }
  }
}

sub getRecentBackupSets(){
  my $log = parseLog();
  my $cutoffMillis = time*1000.0 - $recentLogMillis;
  filterLog($log, $cutoffMillis);
  my @backupSets;
  for my $name(sort keys %$log){
    @backupSets = (@backupSets, parseBackupSets $log, $name);
  }
  return @backupSets;
}

sub parseBackupSets($$){
  my ($log, $backupName) = @_;

  my @allEntries = @{$$log{$backupName}};

  my @entrySets;
  my @entrySet;
  for my $entry(@allEntries){
    if($$entry{type} eq "scan-start" and @entrySet > 0){
      push @entrySets, [@entrySet];
      @entrySet = ();
    }
    push @entrySet, $entry;
  }
  push @entrySets, [@entrySet] if @entrySet > 0;

  my @backupSets;
  for my $entrySet(@entrySets){
    my ($scanStart, $scanEnd, $backupStart, $backupIncomplete, $backupComplete);
    for my $entry(@$entrySet){
      if($$entry{type} eq "scan-start"){
        if(defined $scanStart){
          die "duplicate scan-start:\n$$scanStart{line}$$entry{line}";
        }
        $scanStart = $entry;
      }elsif($$entry{type} eq "scan-end"){
        if(defined $scanEnd){
          die "duplicate scan-end:\n$$scanEnd{line}$$entry{line}";
        }
        $scanEnd = $entry;
      }elsif($$entry{type} eq "backup-start"){
        if(not defined $backupStart or $$entry{filecount} > $$backupStart{filecount}){
          $backupStart = $entry;
        }
      }elsif($$entry{type} eq "backup-end" and $$entry{completestate} eq "incomplete"){
        $backupIncomplete = $entry;
      }elsif($$entry{type} eq "backup-end" and $$entry{completestate} eq "complete"){
        if(defined $backupComplete){
          die "duplicate backup-complete:\n$$backupComplete{line}$$entry{line}";
        }
        $backupComplete = $entry;
      }
    }
    my $backupEnd;
    $backupEnd = $backupComplete if not defined $backupEnd and defined $backupComplete;
    $backupEnd = $backupIncomplete if not defined $backupEnd and defined $backupIncomplete;

    my @times;
    push @times, $$scanStart{time} if defined $scanStart;
    push @times, $$scanEnd{time} if defined $scanEnd;
    push @times, $$backupStart{time} if defined $backupStart;
    push @times, $$backupEnd{time} if defined $backupEnd;
    my $minTime = undef;
    for my $time(@times){
      $minTime = $time if not defined $minTime or $time < $minTime;
    }

    my $backupStatus;
    $backupStatus = "running" if defined $backupStart and not defined $backupEnd;
    $backupStatus = "skipped" if not defined $backupStart;
    $backupStatus = "incomplete" if defined $backupEnd and $$backupEnd{completestate} eq "incomplete";
    $backupStatus = "complete" if defined $backupEnd and $$backupEnd{completestate} eq "complete";
    $backupStatus = "error" if
      not defined $scanStart
      or not defined $scanEnd
      or (defined $backupEnd and not defined $backupStart);

    push @backupSets, {
      backupId => "$backupName-$backupStatus-$minTime",
      backupName => $backupName,
      backupStatus => $backupStatus,
      time => $minTime,
      scanStart => $scanStart,
      scanEnd => $scanEnd,
      backupStart => $backupStart,
      backupEnd => $backupEnd,
    };
  }
  return @backupSets;
}

sub filterLog($$){
  my ($log, $cutoffMillis) = @_;

  for my $name(sort keys %$log){
    my @entries = @{$$log{$name}};
    $$log{$name} = [grep {$$_{time} >= $cutoffMillis/1000.0} @entries];
  }
  return $log;
}

sub parseLog(){
  my @lines = `cat $logFile`;
  my $log = {};

  for my $line(@lines){
    my ($time, $backupName);
    if($line =~ /^I (\d\d)\/(\d\d)\/(\d\d) (\d\d):(\d\d)(AM|PM) \[(\w+)\]/){
      my ($mon, $day, $year, $hour, $min, $ampm, $name) = ($1, $2, $3, $4, $5, $6, $7);

      $time = str2time "$mon/$day/$year $hour:$min$ampm";
      $backupName = $name;
    }else{
      next;
    }

    my $dur = '(?:< )?\d+ (?:minute|hour|day)s?';
    my $n = '[0-9,]+';
    my $fs = '[0-9\.]+\s*[KMGT]?B';
    my $speed = '.*[0-9\.]+\s*[KMGT]?bps';

    my $entry;
    if($line =~ /Scanning for files to back up$/){
      $entry = {
        name => $backupName,
        time => $time,
        line => $line,
        type => "scan-start",
      }
    }elsif($line =~ /Scanning for files completed in ($dur): ($n) files? \(($fs)\) found$/){
      my ($duration, $fileCount, $size) = ($1, $2, $3);
      $entry = {
        name => $backupName,
        time => $time,
        line => $line,
        type => "scan-end",
        duration => $duration,
        filecount => $fileCount,
        size => $size,
      };
    }elsif($line =~ /Starting backup to CrashPlan Central: ($n) files? \(($fs)\) to back up$/){
      my ($fileCount, $size) = ($1, $2);
      $entry = {
        name => $backupName,
        time => $time,
        line => $line,
        type => "backup-start",
        filecount => $fileCount,
        size => $size,
      };
    }elsif($line =~ /(Stopped|Completed) backup to CrashPlan Central in ($dur): ($n) files? \(($fs)\) backed up, ($fs) encrypted and sent @ ($speed)(?: \(Effective rate: $speed\))?$/){
      my ($completestate, $duration, $fileCount, $size, $encsize, $speed) = ($1, $2, $3, $4, $5, $6);
      $entry = {
        name => $backupName,
        time => $time,
        line => $line,
        type => "backup-end",
        completestate => $completestate eq "Completed" ? "complete" : "incomplete",
        duration => $duration,
        filecount => $fileCount,
        size => $size,
        encsize => $encsize,
        speed => $speed,
      };
    }

    if(defined $entry and defined $$entry{filecount}){
      my $count = $$entry{filecount};
      $count =~ s/,//g;
      die "Malformed count: $count\n" if $count !~ /^\d+$/;
      $$entry{filecount} = $count;
    }

    if(defined $entry){
      $$log{$$entry{name}} = [] if not defined $$log{$$entry{name}};
      push @{$$log{$$entry{name}}}, $entry;
    }
  }
  return $log;
}

sub formatBackupSet($){
  my ($set) = @_;

  my $maxLen = 0;
  for my $name(@backupNames){
    $maxLen = length $name if length $name > $maxLen;
  }

  my @allLines;
  push @allLines, $$set{scanStart}{line} if defined $$set{scanStart};
  push @allLines, $$set{scanEnd}{line} if defined $$set{scanEnd};
  push @allLines, $$set{backupStart}{line} if defined $$set{backupStart};
  push @allLines, $$set{backupEnd}{line} if defined $$set{backupEnd};

  if($$set{backupStatus} eq "error"){
    my $reason = "";
    $reason = "missing scan-start" if not defined $$set{scanStart};
    $reason = "missing scan-end" if not defined $$set{scanEnd};
    $reason = "missing backup-start" if not defined $$set{backupStart};
    return "\n!!!$reason\n@allLines\n\n";
  }

  my $start = formatTime($$set{scanStart}{time});
  my $name = padr $$set{backupName}, $maxLen;
  my $status = "";
  $status = "!RUN!" if $$set{backupStatus} eq "running";
  $status = "inc" if $$set{backupStatus} eq "incomplete";
  $status = "skip" if $$set{backupStatus} eq "skipped";
  $status = padl $status, 5;
  my $info = "";

  my $size;
  $size = $$set{backupEnd}{size} if not defined $size and defined $$set{backupEnd};
  $size = $$set{scanEnd}{size} if not defined $size and defined $$set{scanEnd};
  $size = parseSizeMiB $size;
  $size = sprintf "%.3f", $size;
  $size = padl $size, 10;

  my $filecount;
  $filecount = $$set{backupEnd}{filecount} if not defined $filecount and defined $$set{backupEnd};
  $filecount = $$set{scanEnd}{filecount} if not defined $filecount and defined $$set{scanEnd};
  $filecount = padl $filecount, 6;

  if(defined $$set{backupEnd}){
    $info = "${filecount}f ${size}MiB \@ $$set{backupEnd}{speed}";
  }else{
    $info = "${filecount}f ${size}MiB";
  }

  return "$name $start $status $info\n";
}

sub parseSizeMiB($){
  my ($size) = @_;
  if($size !~ /^(\d+(?:\.\d+)?)\s*(B|KB|MB|GB|TB)$/){
    die "malformed size: $size\n";
  }
  my ($num, $unit) = ($1, $2);
  my $scale = 1024; #just guessing, they could actually mean mega instead of mibi

  my $bytes;
  $bytes = $num * $scale * $scale * $scale * $scale if $unit eq "TB";
  $bytes = $num * $scale * $scale * $scale if $unit eq "GB";
  $bytes = $num * $scale * $scale if $unit eq "MB";
  $bytes = $num * $scale if $unit eq "KB";
  $bytes = $num if $unit eq "B";

  return ($bytes / 1024.0 / 1024.0);
}
sub padl($$){
  my ($s, $len) = @_;
  return ' 'x($len - length $s) . $s;
}
sub padr($$){
  my ($s, $len) = @_;
  return $s . ' 'x($len - length $s);
}
sub formatTime($){
  my ($t) = @_;
  return time2str $dateDisplayFormat, $t;
}

&main(@ARGV);
