#!/usr/bin/perl
use strict;
use warnings;
use Term::ReadKey;

$SIG{'INT'} = sub{ReadMode 0; exit 0};

our $keyDelay = 0.1;

sub readKeys();
sub readKeyBytes();
sub startsWith($$);

my $byteSeqs = [
  ['UP',     ['[', 'A']],
  ['DOWN',   ['[', 'B']],
  ['RIGHT',  ['[', 'C']],
  ['LEFT',   ['[', 'D']],
  ['HOME',   ['[', '7', '~']],
  ['END',    ['[', '8', '~']],
  ['INSERT', ['[', '2', '~']],
  ['DELETE', ['[', '3', '~']],
  ['PGUP',   ['[', '5', '~']],
  ['PGDN',   ['[', '6', '~']],
  ['F1',     ['[', '1', '1', '~']],
  ['F2',     ['[', '1', '2', '~']],
  ['F3',     ['[', '1', '3', '~']],
  ['F4',     ['[', '1', '4', '~']],
  ['F5',     ['[', '1', '5', '~']],
  ['F6',     ['[', '1', '7', '~']],
  ['F7',     ['[', '1', '8', '~']],
  ['F8',     ['[', '1', '9', '~']],
  ['F9',     ['[', '2', '0', '~']],
  ['F10',    ['[', '2', '1', '~']],
  ['F11',    ['[', '2', '3', '~']],
  ['F12',    ['[', '2', '4', '~']],
];

sub main(){
  select((select(STDOUT), $|=1)[0]);
  my %keys;
  while(1){
    for my $key(@{readKeys()}){
      print "$key\n";
    }
  }
}

#assumes utf8
sub readKeys(){
  my $enter = 'ENTER';
  my $bkspc = 'BACKSPACE';

  my @keys;
  my $bytes = readKeyBytes();
  for(my $i=0; $i<@$bytes; $i++){
    if(ord $$bytes[$i] == 0x1b){
      for my $byteSeq(@$byteSeqs){
        my ($seqKey, $seqArr) = @$byteSeq;
        my @remBytes = @$bytes;
        shift @remBytes;
        if(startsWith \@remBytes, $seqArr){
          $i+=@$seqArr; #mark the next few bytes as read
          push @keys, $seqKey;
          last;
        }
      }
    }elsif($$bytes[$i] eq "\n"){
      push @keys, $enter;
    }elsif(ord $$bytes[$i] == 0x7f){
      push @keys, $bkspc;
    }elsif(ord $$bytes[$i] >= 0xc2 and ord $$bytes[$i] <= 0xdf){
      my $b1 = $$bytes[$i];
      my $b2 = $i+1<@$bytes ? $$bytes[$i+1] : '';
      my $key = "$b1$b2";
      $i+=1;
      utf8::decode($key);
      push @keys, $key;
    }elsif(ord $$bytes[$i] >= 0xe0 and ord $$bytes[$i] <= 0xef){
      my $b1 = $$bytes[$i];
      my $b2 = $i+1<@$bytes ? $$bytes[$i+1] : '';
      my $b3 = $i+2<@$bytes ? $$bytes[$i+2] : '';
      my $key = "$b1$b2$b3";
      $i+=2;
      utf8::decode($key);
      push @keys, $key;
    }else{
      push @keys, $$bytes[$i];
    }
  }
  return \@keys;
}

sub readKeyBytes(){
  ReadMode 3;
  my @bytes;
  my $start = time;

  while(1){
    my $byte = ReadKey($keyDelay);
    last if not defined $byte and time - $start > $keyDelay;
    push @bytes, $byte if defined $byte;
  }
  ReadMode 0;
  return \@bytes;
}

sub startsWith($$){
  my $arr = shift;
  my $prefix = shift;

  return 0 if @$arr < @$prefix;
  for(my $i=0; $i<@$prefix; $i++){
    if(chr ord $$arr[$i] ne chr ord $$prefix[$i]){
      return 0;
    }
  }
  return 1;
}

&main;
