#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

sub findFile($$);
sub getRandomBackground($$@);
sub setBackground($);
sub remove($@);
sub getFiles($);

my $setExec = "Esetroot";
my $delay = 300;
my $verbose = 1;

my @exts = qw(jpg jpeg png gif bmp);
my $okExts = join "|", @exts;

my $backgroundDir = "$ENV{HOME}/.cache/backgrounds";
my $backgroundSubdir = "fhd";

my $usage = "Usage:
  $0 -h|--help
    Print this message

  $0 [OPTS] [TARGET]
    If TARGET exists and is a file, set TARGET as the X root image.

    If TARGET exists and is a dir, select an image randomly every ${delay}s
      and set it as the X root image

    If TARGET does not exist in the filesystem and is the name of a file under
      \"BACKGROUND_DIR/BACKGROUND_SUBDIR\", set that file as the X root image.
      -the file suffix can be omitted if one of: $okExts
      -if more than one file matches TARGET, use the first lexicograhically

    -if not set, TARGET defaults to \"BACKGROUND_DIR/BACKGROUND_SUBDIR\"
    -\"$setExec\" is used to set the X root image


  OPTS
    -q|--quiet / -v|--verbose          {default is --verbose}
      if --quiet, do not print wallpaper names as they are selected
        and suppress output from $setExec
      otherwise, print each file selected and do not suppress output

    -w|--wait                          {default is to not wait}
      If TARGET does not exist and does not match any files in
        \"BACKGROUND_DIR/BACKGROUND_SUBDIR\", wait ${delay}s and check if it
        exists again, forever.

    --dir=BACKGROUND_DIR               {default is $backgroundDir}
      set the default root dir for selecting images

    --subdir=BACKGROUND_SUBDIR         {default is $backgroundSubdir}
      set the dir within BACKGROUND_DIR used for selecting images
      {use --subdir=. to include all images in BACKGROUND_DIR}

    --delay=DELAY                      {default is $delay}
      change delay to DELAY fractional seconds
      DELAY must be greater than 0

    --exclude=PATTERN                  {default is exclude nothing}
      do not include paths that match PATTERN
      PATTERN is a perl regex that does not contain any kind of bracket
      i.e.: '[', ']', '(', ')', '{', '}'
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)/){
    die $usage;
  }

  my $verbose = 1;
  my $wait = 0;
  my $excludePattern = undef;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-q|--quiet)$/){
      $verbose = 0;
    }elsif($arg =~ /^(-v|--verbose)$/){
      $verbose = 1;
    }elsif($arg =~ /^(-w|--wait)$/){
      $wait = 1;
    }elsif($arg =~ /^--dir=(.*)$/){
      $backgroundDir = $1;
    }elsif($arg =~ /^--subdir=(.*)$/){
      $backgroundSubdir = $1;
    }elsif($arg =~ /^--delay=(\d+(?:\.\d+)?)$/){
      $delay = $1;
      die $usage if $delay <= 0;
    }elsif($arg =~ /^--exclude=(.*)$/){
      $excludePattern = $1;
      if($excludePattern =~ /[(){}\[\]]/){
        die "Invalid pattern, no brackets are allowed: $excludePattern\n";
      }
    }else{
      die $usage;
    }
  }

  my $target = shift;
  $target = "$backgroundDir/$backgroundSubdir/" if not defined $target;
  die $usage if @_ > 0;

  my $curFile = undef;
  while(1){
    if(-f $target){
      setBackground $target;
      exit 0 if not $wait;
    }elsif(-d $target){
      while(1){
        my $file = getRandomBackground $target, $excludePattern, $curFile;
        if(defined $file and -f $file){
          setBackground $file;
          $curFile = $file;
        }
        sleep $delay;
      }
    }else{
      my $file = findFile "$backgroundDir/$backgroundSubdir/", $target;
      if(defined $file and -f $file){
        setBackground $file;
        exit 0;
      }elsif(not $wait){
        die "could not find $target\n";
      }
    }

    print STDERR "could not find $target, waiting\n" if $verbose;
    sleep $delay if $wait
  }
}

sub findFile($$){
  my ($dir, $name) = @_;
  my @files = getFiles($dir);
  for my $file(sort @files){
    if($file =~ /^(.*\/)?$name(\.($okExts))?$/i){
      return $file;
    }
  }
  return undef;
}

sub getRandomBackground($$@){
  my ($dir, $excludePattern, @excludeList) = @_;

  return undef if not -d $dir;
  my @files = getFiles($dir);
  if(defined $excludePattern){
    @files = grep {$_ !~ /$excludePattern/i} @files;
  }
  for my $file(@excludeList){
    @files = remove $file, @files if defined $file;
  }
  if(@files > 0){
    my $i = rand @files;
    return $files[$i];
  }
}

sub setBackground($){
  my $file = shift;
  print "$file\n" if $verbose;
  $file =~ s/'/'\\''/g;
  my $redirect = $verbose ? '' : ">/dev/null 2>/dev/null";
  system "$setExec '$file' $redirect";
}

sub remove($@){
  my ($elem, @arr) = @_;
  my @newArr;
  for my $e(@arr){
    push @newArr, $e unless $elem eq $e;
  }
  return @newArr;
}

sub getFiles($){
  my $dir = shift;
  my @exts = map { ("-or", "-iname", "*.$_") } @exts;
  open FH, "-|", "find", $dir, "-false", @exts;
  my @files = <FH>;
  chomp foreach @files;
  return @files;
}

&main(@ARGV);
