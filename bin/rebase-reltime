#!/usr/bin/perl
use strict;
use warnings;
use Date::Parse qw(str2time);
use Date::Format qw(time2str);

my $dateRange = int(20 * 365 * 24 * 60 * 60);

sub readFilterCommitsFile($);
sub writeFilterCommitsFile($$);
sub getFilterScript($);
sub checkTime($);
sub getTime($);
sub absTime($);
sub formatTime($);
sub run(@);

my $dateDisplayFormat = "%Y-%m-%d %H:%M:%S";
my $dateDisplayFormatRegex = "\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}";

my $usage = "Usage:
  $0 [OPTS] TARGET_COMMIT START_DATE END_DATE
    rebase HEAD onto git commit TARGET_COMMIT
    make earliest commit START_DATE and latest commit END_DATE,
      and make each intermediate commit fall between them
    START_DATE and END_DATE can be:
      -unix timestamp {seconds since epoch}
      -relative past time of the form: \"X UNITs ago\"
       UNIT can be days, hours, minutes, or seconds
      -\"now\" for right now
      -\"start\" for the oldest date in the commits
      -\"end\" for the newest date in the commits

  OPTS
    -f  use -f in git filter-branch command
";

sub main(@){
  my $force = 0;
  while (@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-f)$/){
      $force = 1;
    }else{
      die $usage;
    }
  }
  die $usage if @_ != 3;
  my ($targetCommit, $startDate, $endDate) = @_;
  my @commits = `git rev-list $targetCommit..HEAD`;
  chomp foreach @commits;
  if($startDate !~ /^(start|end)$/){
    $startDate = getTime $startDate;
  }
  if($endDate !~ /^(start|end)$/){
    $endDate = getTime $endDate;
  }

  my ($oldest, $newest);
  for my $c(@commits){
    my $t = `git show -s --format=%ct $c`;
    chomp $t;
    die "Invalid commit date: $t\n" if not checkTime $t;
    $oldest = $t if not defined $oldest or $t < $oldest;
    $newest = $t if not defined $newest or $t > $newest;
  }
  die "no commits\n" if not defined $oldest or not defined $newest;

  $startDate = $oldest if $startDate =~ /^(start)$/;
  $startDate = $newest if $startDate =~ /^(end)$/;
  $endDate = $oldest if $endDate =~ /^(start)$/;
  $endDate = $newest if $endDate =~ /^(end)$/;

  printf "old range: %s => %s\n", formatTime($oldest), formatTime($newest);
  printf "new range: %s => %s\n", formatTime($startDate), formatTime($endDate);

  my $filterCommits = [];
  my %originalDates;
  for my $c(@commits){
    my $t = `git show -s --format=%ct $c`;
    chomp $t;
    my $offsetRatio;
    if($newest == $oldest){
      $offsetRatio = 0;
    }else{
      $offsetRatio = ($t-$oldest) / ($newest-$oldest);
    }
    my $offset = $offsetRatio * ($endDate - $startDate);
    my $newDate = $startDate + $offset;
    $originalDates{$c} = $t;
    push @$filterCommits, [$c, $newDate];
  }

  for my $commitDate(@$filterCommits){
    my ($commit, $newDate) = @$commitDate;
    my $originalDate = $originalDates{$commit};
    printf "$commit %s => %s\n", formatTime($originalDate), formatTime($newDate);
  }
  my $filterScript = getFilterScript $filterCommits;
  my @cmd = ("git", "filter-branch");
  @cmd = (@cmd, "-f") if $force;
  @cmd = (@cmd, "--env-filter", $filterScript, "$targetCommit..HEAD");
  run @cmd;
}

sub readFilterCommitsFile($){
  my ($file) = @_;
  my $filterCommits = [];
  open FH, "< $file" or die "Could not read $file\n";
  my @lines = <FH>;
  close FH;
  for my $line(@lines){
    my $parsedLine = $line;
    chomp $parsedLine;
    $parsedLine =~ s/#.*//;
    $parsedLine =~ s/^\s+//;
    $parsedLine =~ s/\s+$//;
    next if $parsedLine =~ /^\s*$/;
    if($parsedLine =~ /^([a-f0-9]{40}) ($dateDisplayFormatRegex)$/){
      push @$filterCommits, [$1, getTime($2)];
    }else{
      die "Malformed line: $line";
    }
  }
  return $filterCommits;
}
sub writeFilterCommitsFile($$){
  my ($file, $filterCommits) = @_;
  open FH, "> $file" or die "Could not write $file\n";
  for my $commitDate(@$filterCommits){
    my ($commit, $t) = @$commitDate;
    printf FH "%s %s\n", $commit, formatTime($t);
  }
  close FH;
}

sub getFilterScript($){
  my ($filterCommits) = @_;
  my $script = '';
  for my $commitDate(@$filterCommits){
    my ($commit, $t) = @$commitDate;
    my $tz = `date +%z`;
    chomp $tz;
    my $date = "$t $tz";
    $script .= ""
      . "  if [ \$GIT_COMMIT = $commit ]\n"
      . "  then\n"
      . "    export GIT_AUTHOR_DATE=\"$date\"\n"
      . "    export GIT_COMMITTER_DATE=\"$date\"\n"
      . "  fi\n"
      ;
  }
  return $script;
}

sub checkTime($){
  my ($t) = @_;
  my $now = time;
  return $t =~ /^\d+$/
    && ($now - $dateRange) < $t && $t < ($now + $dateRange);
}

sub getTime($){
  my ($date) = @_;

  my $t;
  if(checkTime $date){
    $t = $date;
  }elsif($date =~ /^([0-9.]+) seconds ago$/){
    $t = absTime int($1);
  }elsif($date =~ /^([0-9.]+) minutes ago$/){
    $t = absTime int($1*60);
  }elsif($date =~ /^([0-9.]+) hours ago$/){
    $t = absTime int($1*60*60);
  }elsif($date =~ /^([0-9.]+) days ago$/){
    $t = absTime int($1*24*60*60);
  }elsif($date =~ /^now$/){
    $t = absTime 0;
  }else{
    $t = str2time $date;
  }

  die "Invalid date: $date\n" if not checkTime $t;
  return $t;
}

sub absTime($){
  my ($secAgo) = @_;
  my $t = `date --date="$secAgo seconds ago" +%s`;
  chomp $t;
  return $t;
}

sub formatTime($){
  my ($t) = @_;
  return time2str $dateDisplayFormat, $t;
}

sub run(@){
  print "@_\n";
  system @_;
  die "Error running '@_'\n" if $? != 0;
}

&main(@ARGV);
