#!/usr/bin/perl
use strict;
use warnings;
use Cwd 'abs_path';

$SIG{'INT'} = sub{exit 0};

my @ext = qw(mkv mp4 avi wmv m2ts);

my $IMDB_SCAN_DIR = "$ENV{HOME}/.cache/imdb-scan";

sub getQueries($);
sub cleanUp($);
sub getTT(@);
sub getMountPoint($);
sub omdb($);
sub searchImdb($);
sub run(@);
sub runOrDie(@);
sub getProcLines(@);

my $usage = "Usage:
  $0 -h|--help
    print this message

  $0 DIR
    scan DIR

  $0 -s FILE|TITLE
    attempt to print IMDB info for the file or title indicated
";

sub main(@){
  die $usage if @_ > 0 and $_[0] =~ /^(-h|--help)$/;

  if(@_ == 1 and -d $_[0]){
    my $dir = shift;
    $dir = abs_path $dir;
    my $mountPoint = getMountPoint($dir);
    runOrDie "mkdir", "-p", $IMDB_SCAN_DIR;
    my @files = getProcLines ("find", $dir, "-false",
      map {("-or", "-iname", "*.$_")} @ext);

    my @tts;

    my $total = @files;
    my $fetched = 0;
    my $skipped = 0;

    my $filesDir = "$IMDB_SCAN_DIR/files";
    runOrDie "mkdir", "-p", $filesDir;
    for my $file(sort @files){
      chomp $file;
      my $fileName = $file;
      $fileName =~ s/^.*\/([^\/]*)$/$1/;
      my $relFile = $file;
      $relFile =~ s/^$mountPoint//;
      my $relDir = $relFile;
      $relDir =~ s/\/[^\/]*$//;

      my $scanDir = "$filesDir/$relDir";
      my $scanFile = "$scanDir/$fileName";

      my $tt;
      if(-f $scanFile){
        open FH, "< $scanFile" or die "Could not read $scanFile\n";
        $tt = join '', <FH>;
        close FH;
        chomp $tt;
        $tt = undef if $tt !~ /^tt\d\d\d\d+$/;
      }

      if(not defined $tt){
        print "getting tt for $file\n";
        $tt = getTT(getQueries $file);
        if(defined $tt){
          $fetched++;
          runOrDie "mkdir", "-p", $scanDir;
          open FH, "> $scanFile" or die "Could not write $scanFile\n";
          print FH "$tt\n";
          close FH;
        }
      }else{
        $skipped++;
      }

      push @tts, $tt if defined $tt;
    }
    my $missing = $total - $fetched - $skipped;
    print "title=>tt complete\n";
    print "missing $missing/$total   (skipped $skipped, fetched $fetched)\n";

    my $ttsDir = "$IMDB_SCAN_DIR/tts";
    runOrDie "mkdir", "-p", $ttsDir;
    for my $tt(@tts){
      my $ttFile = "$ttsDir/$tt";
      if(not -f $ttFile){
        print "fetching info for $tt\n";
        my $omdb = omdb $tt;
        open FH, "> $ttFile" or die "Could not write $ttFile\n";
        print FH $omdb;
        close FH;
      }
    }
  }elsif(@_ == 2 and $_[0] =~ /^(-s)$/){
    my $cmd = shift;
    my $arg = shift;
    my @queries = getQueries $arg;
    print "searching: " . join(", ", @queries) . "\n";
    my $tt = getTT(@queries);
    if(defined $tt){
      print "found: $tt\n";
      print omdb $tt;
    }else{
      print "sorry, no imdb title found\n";
    }
  }else{
    die $usage;
  }
}

sub getQueries($){
  my $arg = shift;
  my @queries;
  if(-f $arg){
    my $file = abs_path($arg);
    my $parentDir;
    my $fileName;
    my $fileNameGuess;
    my $mediaInfoName;
    if($file =~ /\/([^\/]+)\/([^\/]+)$/){
      $parentDir = $1;
      $fileName = $2;
      $fileName =~ s/\.[a-z0-9]{1,5}$//;
    }
    $file =~ s/'/'\\''/g;
    #my $mediaInfo = `mediainfo '$file'`;
    #if($mediaInfo =~ /Movie name\s*: (.+)/){
    #  $mediaInfoName = $1;
    #}
    push @queries, $mediaInfoName if defined $mediaInfoName;
    push @queries, $fileName if defined $fileName;
    push @queries, $parentDir if defined $parentDir;
    push @queries, cleanUp $fileName if defined $fileName;
    push @queries, cleanUp $parentDir if defined $parentDir;
  }
  push @queries, $arg;
  push @queries, cleanUp $arg;

  return @queries;
}

sub cleanUp($){
  my $arg = shift;
  $arg =~ s/(
    1080p|1080i|1080|720p|720i|720
    |x264|h264|xvid
    |dvd.rip|dvd|bd.rip|bluray.rip
    |19\d\d|20\d\d
  ).*//ix;
  return $arg;
}

sub getTT(@){
  my @queries = @_;

  for my $q(@queries){
    my $tt = searchImdb($q);
    if(defined $tt){
      return $tt;
    }
    if(defined $tt){
      return $tt;
    }
  }
  return undef;
}

sub getMountPoint($){
  my $f = shift;
  $f =~ s/'/'\\''/g;
  my $df = `df '$f'`;
  if($df =~ /\d+\%\s*(.*)/){
    return $1;
  }
  return undef;
}

sub omdb($){
  my $tt = shift;
  my $omdb = `wget http://www.omdbapi.com/?i=$tt -O - 2>/dev/null`;
  return $omdb;
}

sub searchImdb($){
  my $q = shift;
  $q =~ s/[^a-zA-Z0-9]+/ /g;
  my $url = "http://www.imdb.com/find?s=tt&q=$q";
  my $tmp = "/tmp/tmp-imdb";
  system "wget '$url' -O $tmp >/dev/null 2>/dev/null";
  open FH, "< $tmp" or die "Could not read $tmp\n";
  my @lines = <FH>;
  close FH;
  my @tts;
  for my $line(@lines){
    @tts = (@tts, $line =~ /(tt\d\d\d\d+)/g);
  }
  if(@tts > 0){
    return $tts[0];
  }
  return undef;
}

sub run(@){
  print "@_\n";
  system @_;
}
sub runOrDie(@){
  run @_;
  die "Error running '@_'\n" if $? != 0;
}
sub getProcLines(@){
  open FH, "-|", @_;
  my @lines = <FH>;
  close FH;
  die "Error running \"@_\"\n" if $? != 0;
  return @lines;
}

&main(@ARGV);
