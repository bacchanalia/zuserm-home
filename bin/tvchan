#!/usr/bin/perl
use strict;
use warnings;
use POSIX ":sys_wait_h";
use Time::HiRes qw(sleep time);

my @ext = qw(mkv mp4 avi 3gp wmv m2ts ogv);

my $msgLen = 60;
my $mplayerConfFile = "/tmp/mplayer-tvchan.conf";
my $inputCmdFile = "/tmp/mplayer-tvchan-commands";
my $inputConfFile = "/tmp/mplayer-tvchan-input.conf";
my $defaultAutoSkipDelay = 30;

my $mplayerConf = {
  "fs"                => "yes",
  "subfont-osd-scale" => 2,
};

my $exitCode = 209;
my %commands = (
  back     => [$exitCode++, [qw( F9  1       )]],
  forward  => [$exitCode++, [qw( F10 2 ENTER )]],
  end      => [$exitCode++, [qw( F11 3       )]],
  quit     => [$exitCode++, [qw( F12 4 q     )]],
  autoskip => [$exitCode++, [qw( F5  5       )]],
);
my %exitCodes = map {$_ => ${$commands{$_}}[0]} keys %commands;

my $inputConf = {};
for my $cmd(values %commands){
  my ($exitCode, $keys) = @$cmd;
  $$inputConf{$_} = "quit $exitCode" foreach @$keys;
}

sub execPlay($$$);
sub getRandomEntry($);
sub getRandomPos($);
sub writeInputConf();
sub writeMplayerConf();
sub writeInputCommands(@);
sub getProcLines(@);
sub getProcLinesNoFail(@);

my $usage = "Usage:
  $0 [OPTS] DIR [DIR ..]

  OPTS:
  -s STRING
    use imdb to filter files

  --autoskip  | --autoskip=SECONDS
     start in autoskip mode, and optionally set the delay to SECONDS
       {default is $defaultAutoSkipDelay}
     SECONDS is the number of seconds to wait before running forward
     autoskip timer is reset when a new video is opened
     autoskip is suspended/resumed when 'auto' key command is run
";

sub main(@){
  my $autoSkip = 0;
  my $autoSkipDelay = $defaultAutoSkipDelay;
  my $search;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^--autoskip(?:=(\d+))?$/){
      $autoSkip = 1;
      $autoSkipDelay = $1 if defined $1;
    }elsif($arg =~ /-s/ and @_ > 0){
      $search = shift;
    }else{
      die $usage;
    }
  }

  my @dirs = @_;
  die $usage if @dirs == 0;

  writeInputConf;
  writeMplayerConf;

  my @cmd;
  push @cmd, "find";
  for my $dir(@dirs){
    die "\"$dir\" is not a directory\n" if not -d $dir;
    push @cmd, $dir;
  }
  push @cmd, "-false";
  for my $ext(@ext){
    push @cmd, ("-or", "-iname", "*.$ext");
  }

  my $files = getProcLines @cmd;
  chomp foreach @$files;

  if(defined $search){
    my $newFiles = [];
    for my $file(@$files){
      my $imdb = join '', @{getProcLinesNoFail("imdb", "-c", $file)};
      if($imdb =~ /$search/i){
        push @$newFiles, $file;
      }
    }
    $files = $newFiles;
    print "SELECTED:\n" . join "\n", @$files;
  }

  my @history;
  my $index = 0;
  while(1){
    my ($file, $pos);
    if($index < @history){
      ($file, $pos) = @{$history[$index]};
    }else{
      $file = getRandomEntry $files;
      $pos = getRandomPos $file;
      push @history, [$file, $pos];
    }

    my $msg = $file;
    for my $dir(@dirs){
      $msg =~ s/^$dir//;
    }
    my $len = length $msg;
    if($len > $msgLen){
      $msg = substr $msg, $len - $msgLen;
    }

    print "\n\nPLAYING: $file @ $pos\n\n";
    my $status;
    my $pid = fork;
    my $start = time;
    if($pid == 0){
      execPlay $file, $pos, $msg;
    }else{
      my $kid;
      do{
        $kid = waitpid $pid, WNOHANG;
        $status = $?;
        $status /= 256 if $status > 256;
        sleep 0.5;
        if($autoSkip && time - $start > $autoSkipDelay){
          print "\nauto-skipped\n";
          system "kill $pid";
          waitpid $pid, 0;
          $status = $exitCodes{forward};
        }
      } while $kid == 0;
    }

    if($status == $exitCodes{back}){
      $index--;
      $index = 0 if $index < 0;
    }elsif($status == $exitCodes{forward} or $status == 0){
      $index++;
      $index = @history if $index > @history;
    }elsif($status == $exitCodes{end}){
      $index = @history;
    }elsif($status == $exitCodes{quit}){
      last;
    }elsif($status == $exitCodes{autoskip}){
      $autoSkip = not $autoSkip;
    }elsif($status != 0){
      die "\nunexpected mplayer exit code, terminating\n";
    }
  }
}

sub execPlay($$$){
  my ($file, $pos, $msg) = @_;
  writeInputCommands(
    "osd_show_text \"$msg\" 1000",
  );
  exec "mplayer",
    "-input", "conf=$inputConfFile",
    "-input", "file=$inputCmdFile",
    "-include", $mplayerConfFile,
    "-ss", $pos,
    $file,
  ;
}

sub getRandomEntry($){
  my $arr = shift;
  my $randIndex = rand @$arr;
  return $$arr[$randIndex];
}

sub getRandomPos($){
  my $file = shift;
  die "Could not find \"$file\"\n" if not -f $file;
  my $durLines = getProcLines "duration", "-n", "-s", $file;
  die "Error running duration on $file\n" if @$durLines != 1;
  my $dur = $$durLines[0];
  chomp $dur;

  die "Malformed duration: $dur\n" if $dur !~ /^\d+(\.\d+)?$/;
  my $pos = rand() * $dur;
  return sprintf '%.2f', $pos;
}

sub writeInputConf(){
  my $conf = '';
  for my $key(keys %$inputConf){
    $conf .= "$key $$inputConf{$key}\n";
  }
  open FH, "> $inputConfFile" or die "Could not write to $inputConfFile\n";
  print FH $conf;
  close FH;
}

sub writeMplayerConf(){
  my $conf = '';
  for my $key(keys %$mplayerConf){
    $conf .= "$key=$$mplayerConf{$key}\n";
  }
  open FH, "> $mplayerConfFile" or die "Could not write to $mplayerConfFile\n";
  print FH $conf;
  close FH;
}
sub writeInputCommands(@){
  my $cmds = '';
  for my $cmd(@_){
    $cmds .= "$cmd\n";
  }
  open FH, "> $inputCmdFile" or die "Could not write to $inputCmdFile\n";
  print FH $cmds;
  close FH;
}

sub getProcLines(@){
  my $lines = getProcLinesNoFail @_;
  die "Error running \"@_\"\n" if $? != 0;
  return $lines;
}
sub getProcLinesNoFail(@){
  open FH, "-|", @_;
  my @lines = <FH>;
  close FH;
  return \@lines;
}

&main(@ARGV);
