#!/usr/bin/perl
use strict;
use warnings;

my @ext = qw(mkv mp4 avi wmv m2ts);

my $inputCmdFile = "/tmp/mplayer-tvchan-commands";
my $inputConfFile = "/tmp/mplayer-tvchan-input.conf";
my $inputConf = {
  F9    => 'quit 209',  #back
  F10   => 'quit 210',  #forward
  F11   => 'quit 211',  #go to end
  F12   => 'quit 212',  #quit
  q     => 'quit 212',  #quit
  ENTER => 'quit 210',  #forward
};

sub play($$);
sub getRandomEntry($);
sub getRandomPos($);
sub writeInputConf();
sub writeInputCommands(@);
sub getProcLines(@);

sub main(@){
  my @dirs = @_;
  die "Usage: $0 DIR [DIR ..]\n" if @dirs == 0;

  writeInputConf;

  my @cmd;
  push @cmd, "find";
  for my $dir(@dirs){
    die "\"$dir\" is not a directory\n" if not -d $dir;
    push @cmd, $dir;
  }
  push @cmd, "-false";
  for my $ext(@ext){
    push @cmd, ("-or", "-iname", "*.$ext");
  }

  my $files = getProcLines @cmd;
  chomp foreach @$files;
  my @history;
  my $index = 0;
  while(1){
    my ($file, $pos);
    if($index < @history){
      ($file, $pos) = @{$history[$index]};
    }else{
      $file = getRandomEntry $files;
      $pos = getRandomPos $file;
      push @history, [$file, $pos];
    }

    print "\n\nPLAYING: $file @ $pos\n\n";
    my $status = play $file, $pos;
    if($status == 209){
      $index--;
      $index = 0 if $index < 0;
    }elsif($status == 210 or $status == 0){
      $index++;
      $index = @history if $index > @history;
    }elsif($status == 211){
      $index = @history;
    }elsif($status == 212){
      last;
    }elsif($status != 0){
      die "\nunexpected mplayer exit code, terminating\n";
    }
  }
}

sub play($$){
  my ($file, $pos) = @_;
  writeInputCommands(
  );
  system "mplayer",
    "-input", "conf=$inputConfFile",
    "-input", "file=$inputCmdFile",
    "-ss", $pos,
    $file,
  ;
  my $code = $?;
  $code /= 256 if $code > 256;
  return $code;
}

sub getRandomEntry($){
  my $arr = shift;
  my $randIndex = rand @$arr;
  return $$arr[$randIndex];
}

sub getRandomPos($){
  my $file = shift;
  die "Could not find \"$file\"\n" if not -f $file;
  my $durLines = getProcLines "duration", "-n", "-s", $file;
  die "Error running duration on $file\n" if @$durLines != 1;
  my $dur = $$durLines[0];
  chomp $dur;

  die "Malformed duration: $dur\n" if $dur !~ /^\d+(\.\d+)?$/;
  my $pos = rand() * $dur;
  return sprintf '%.2f', $pos;
}

sub writeInputConf(){
  my $conf = '';
  for my $key(keys %$inputConf){
    $conf .= "$key $$inputConf{$key}\n";
  }
  open FH, "> $inputConfFile" or die "Could not write to $inputConfFile\n";
  print FH $conf;
  close FH;
}

sub writeInputCommands(@){
  my $cmds = '';
  for my $cmd(@_){
    $cmds .= "$cmd\n";
  }
  open FH, "> $inputCmdFile" or die "Could not write to $inputCmdFile\n";
  print FH $cmds;
  close FH;
}

sub getProcLines(@){
  open FH, "-|", @_;
  my @lines = <FH>;
  close FH;
  die "Error running \"@_\"\n" if $? != 0;
  return \@lines;
}

&main(@ARGV);
