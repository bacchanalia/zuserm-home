#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

my $logDir = "$ENV{HOME}/.cyphertite/logs";

my $home = $ENV{HOME};
$home = "/media/$home" if -d "/media/$home";

my $backups = {
  backgrounds => "$home/Desktop/Backgrounds",
  dcim => "$home/Desktop/DCIM",
  documents => "$home/Desktop/Documents",
  games => "$home/Desktop/Games",
  music => "/media/stuff/Music",
  n9 => "$home/Code/n9",
  pictures => "$home/Desktop/Pictures",
  records => "$home/Desktop/Records",
  pidgin => "$home/.purple",
  thunderbird => "$home/.thunderbird",
};

sub handleCtfile($$);
sub getLatestLogFile($);
sub formatStatus($$);
sub run(@);
sub bashComplete($$);

my $usage = "Usage:
  $0 --all
     run 'ct-log NAME DIR' for all (NAME => DIR) pairs

  $0 NAME
     run 'ct-log NAME DIR'

  $0 --log NAME
     run tail -F on the latest log file

  $0 --status NAME
     print count and size of files uploaded using the latest log in ct-log

  $0 --bash-complete COMP_LINE COMP_POINT
     print a list of words for bash completion
     COMP_LINE  - the full cmdline as a string
     COMP_POINT - the cursor position in the cmdline

  NAME => DIR:
    " . join("\n    ", map {"$_ => $$backups{$_}"} sort keys %$backups) . "
";

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print join ' ', bashComplete($_[1], $_[2]);
    exit 0;
  }

  my $cmd = shift if @_ > 0 and $_[0] =~ /^(--all|--log|--status)$/;
  $cmd = '' if not defined $cmd;

  if($cmd =~ /^(--all)$/){
    for my $ctfile(sort keys %$backups){
      print "\n\n===$ctfile===\n\n";
      handleCtfile $ctfile, "";
    }
  }else{
    my $ctfile = shift;
    handleCtfile $ctfile, $cmd;
  }
}

sub handleCtfile($$){
  my ($ctfile, $cmd) = @_;
  die $usage if not defined $ctfile or not defined $$backups{$ctfile};

  my $dir = $$backups{$ctfile};
  if($dir !~ /^(.+)\/([^\/]+)$/){
    die "error parsing dir $dir\n";
  }
  my ($parent, $child) = ($1, $2);
  die "dir not found: $parent\n" if not -d $parent;
  chdir $parent;
  $ENV{PWD} = $parent;

  die "dir not found: $child\n" if not -d $child;

  if($cmd =~ /^(--status)$/){
    print formatStatus($ctfile, $child);
  }elsif($cmd =~ /^(--log)$/){
    my $log = getLatestLogFile($ctfile);
    die "no log exists for $ctfile\n" if not defined $log;
    run "tail", "-F", $log;
  }else{
    my $oldLog = getLatestLogFile($ctfile);
    $oldLog = "" if not defined $oldLog;

    my @cmd = ("ct-log", $ctfile, $child);
    run "screen-cmd", @cmd;

    my $newLog = getLatestLogFile($ctfile);

    if(not defined $newLog or $newLog eq $oldLog){
      sleep 0.5;
      $newLog = getLatestLogFile($ctfile);
    }
    if(not defined $newLog or $newLog eq $oldLog){
      die "no log found for $ctfile\n";
    }
    my $screenPid = `screen-cmd --pid @cmd`;
    chomp $screenPid;
    my $pidArg = $screenPid =~ /^\d+$/ ? "--pid=$screenPid" : "";

    run "tail", "-F", $pidArg, $newLog;
  }
}

sub getLatestLogFile($){
  my $ctfile = shift;
  my @files = sort `find $logDir -name ${ctfile}_*_*.log 2>/dev/null`;
  chomp foreach @files;
  return @files == 0 ? undef : $files[-1];
}

sub formatStatus($$){
  my ($ctfile, $dir) = @_;
  my $log = getLatestLogFile($ctfile);
  die "no log found for $ctfile\n" if not defined $log;
  my @lines = `cat $log`;
  shift @lines;
  shift @lines;
  chomp foreach @lines;

  my $ignoredRegex = join "|", (
    "^prev backup time.*",
    "^ .*",
    "^Generating filelist, this may take a few minutes...",
    "^Done! Initiating backup...",
    "^Files scanned.*",
    "^Total data.*",
    "^Data read.*",
    "^Data skipped.*",
    "^Data compressed.*",
    "^Data exists.*",
    "^Data sent.*",
    "^Reduction ratio.*",
    "^Total Time.*",
    "^unable to access.*",
    "^can't open directory.*",
    "Lost connection to server will attempt to reconnect",
    "Unable to contact server, continuing to retry connection",
    "Reconnected",
  );

  my $finished = 0;
  for my $line(@lines){
    if($line =~ /^Total Time/){
      $finished = 1;
      last;
    }
  }

  my @files = @lines;
  s/($ignoredRegex).*// foreach @files;
  @files = grep {$_ !~ /^\s*$/} @files;

  @files = grep {not -l $_} @files;

  my $msg = '';

  my @failedFiles = grep {not -e $_} @files;
  if(@failedFiles > 0){
    $msg .= "files not found:\n" . join("\n", @failedFiles) . "\n";
  }
  $dir =~ s/'/'\\''/g;
  my $fileCount = `find '$dir' -type f -not -type l | wc -l`;
  my @okFiles = grep {-f $_} @files;

  my $size = 0;
  my $du = `du -s -b '$dir'`;
  my $total = $1 if $du =~ /^(\d+)/;
  for my $file(@okFiles){
    my $fsize = -s $file if -f $file;
    $size += $fsize;
  }
  $msg .= "FINISHED\n" if $finished;
  $msg .= "no files handled\n" if @okFiles == 0;
  if(defined $fileCount and $fileCount > 0){
    $msg .= sprintf "files: %.1f%%   %d / %d\n",
      100*@okFiles/$fileCount,
      scalar(@okFiles),
      $fileCount;
  }
  if(defined $total and $total > 0){
    $msg .= sprintf "size : %.1f%%   %d / %d\n",
      100*$size/$total,
      $size,
      $total;
  }
  return $msg;
}

sub run(@){
  print "@_\n";
  system @_;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  pop @words if not $isNewWord;

  my @names = sort keys %$backups;

  my @cmds = qw(
    --all
    --log
    --status
    --bash-complete
  );

  my @opts = qw(
  );

  if(@words == 0){
    return (@names, @cmds, @opts);
  }

  if(@words == 1 and $words[0] =~ /^(--log|--status)$/){
    return (@names);
  }

  return ();
}

&main(@ARGV);
