#!/usr/bin/perl
use strict;
use warnings;

my $secretsFile = "$ENV{HOME}/.secrets";
my @secretKeys = qw(username password host);

my $gnuplotDdrDir = "$ENV{HOME}/.cache/gnuplot-ddr";

sub uploadIndex($);
sub uploadGnuplotDdr($);
sub getGnuplotDdrHtml($);
sub getWishlistHtml();
sub getTodoHtml();
sub uploadFile($$$);
sub uploadFileContents($$$);
sub lftpCommand($@);
sub readSecrets();

my $usage = "Usage:
  $0 [--skip-plotddr]
     upload index.html and other files to website

     1) gnuplot DDR images are painted [unless --skip-plotddr is given]
         '$gnuplotDdrDir' is populated using `plotddr --nofeh --non9`
     2) index.html is built and uploaded
          HTML is assembled using `todo-parse --html`
          and the contents of the dir '$gnuplotDdrDir'
          and is uploaded
     3) the gnuplot DDR images are uploaded [unless --skip-plotddr is given]
          '$gnuplotDdrDir' is synced using lftp

     --skip-plotddr
       skip steps 1 and 3, and merely build the index.html file using
       what already exists and todo-parse

  $0 -s|--login
     login to website with lftp
";

sub main(@){
  my $secrets;
  if(@_ == 1 and $_[0] =~ /^(-s|--login)$/){
    $secrets = readSecrets();
    lftpCommand $secrets;
    exit 0;
  }
  my $skipPlotddr = shift if @_ > 0 and $_[0] =~ /^(--skip-plotddr)$/;
  die $usage if @_ != 0;

  $secrets = readSecrets();

  system "plotddr", "--nofeh", "--non9" unless $skipPlotddr;

  uploadIndex $secrets;
  uploadGnuplotDdr $secrets unless $skipPlotddr;
}

sub uploadIndex($){
  my ($secrets) = @_;

  my $wishlistHtml = getWishlistHtml();
  my $gnuplotDdrN9Html = getGnuplotDdrHtml 'n9';
  my $gnuplotDdrFhdHtml = getGnuplotDdrHtml 'fhd';
  my $todoHtml = getTodoHtml();

  my $indexHtml = ""
    . "<html>\n"
    . "<head/>\n"
    . "<body>\n"
    . "  <hr/>\n"
    . "\n"
    . "  <br/><br/>\n"
    . "  <a href=\"#wishlist\" style=\"font-size: 150%\"/>wishlist</a>\n"
    . "  <br/><br/>\n"
    . "  <a href=\"#ddrn9\" style=\"font-size: 150%\"/>ddr-small</a>\n"
    . "  <br/><br/>\n"
    . "  <a href=\"#ddrfhd\" style=\"font-size: 150%\"/>ddr-large</a>\n"
    . "  <br/><br/>\n"
    . "  <a href=\"#todo\" style=\"font-size: 150%\"/>todo</a>\n"
    . "\n"
    . "  <hr/>\n"
    . "  <a name=\"wishlist\"></a>\n"
    . $wishlistHtml
    . "  <hr/>\n"
    . "  <a name=\"ddrn9\"></a>\n"
    . $gnuplotDdrN9Html
    . "  <a name=\"ddrfhd\"></a>\n"
    . $gnuplotDdrFhdHtml
    . "\n"
    . "  <hr/>\n"
    . "  <a name=\"todo\"></a>\n"
    . "  <div>\n"
    . $todoHtml
    . "  </div>\n"
    . "\n"
    . "  <hr/>\n"
    . "</body>\n"
    . "</html>\n"
    ;

  uploadFileContents $secrets, $indexHtml, "index.html";
}

sub uploadGnuplotDdr($){
  my ($secrets) = @_;
  my $attempts = 10;
  while($attempts > 0){
    my $output = lftpCommand $secrets, "-e", "mirror -R --delete $gnuplotDdrDir/; exit";
    if($output =~ m/^Total: \d+ dir.*, \d+ file.*, \d+ symlink.*$/m){
      last;
    }elsif($attempts <= 0){
      die "mirror failed\n";
    }else{
      print "mirror failed, retrying $attempts more times\n";
      $attempts--;
    }
  }
}

sub getWishlistHtml(){
  my @lines = `cat $ENV{HOME}/wishlist 2>/dev/null`;
  my $html = "<h1>WISHLIST</h1>";
  for my $line(@lines){
    chomp $line;
    $line =~ s/&/&amp;/g;
    $line =~ s/</&lt;/g;
    $line =~ s/>/&gt;/g;
    $html .= "$line\n<br/>\n";
  }
  return $html;
}

sub getGnuplotDdrHtml($){
  my $subdir = shift;
  my @files = `ls $gnuplotDdrDir/$subdir/`;
  chomp foreach @files;
  return join '', map {"  <img src=\"gnuplot-ddr/$subdir/$_\"><hr/>\n"} @files;
}

sub getTodoHtml(){
  my $todoHtml = `todo-parse --html`;
  die "error getting todo HTML\n" if $? != 0;
  return $todoHtml;
}

sub uploadFile($$$){
  my ($secrets, $src, $dest) = @_;
  lftpCommand $secrets, "-e", "put $src -o $dest; exit",
}
sub uploadFileContents($$$){
  my ($secrets, $contents, $dest) = @_;
  my $tmpFile = "/tmp/website-upload-" . time();
  open FH, "> $tmpFile" or die "Couldnt write to $tmpFile\n";
  print FH $contents;
  close FH;
  uploadFile $secrets, $tmpFile, $dest;
}

sub lftpCommand($@){
  my ($secrets, @cmd) = @_;
  print "running lftp command: @cmd\n";
  open FH, "-|", "lftp",
    "-u", "$$secrets{username},$$secrets{password}",
    $$secrets{host},
    @cmd,
    ;
  my $output = '';
  while(my $line=<FH>){
    print $line;
    $output .= $line;
  }
  close FH;
  return $output;
}

sub readSecrets(){
  my @lines = `cat $secretsFile 2>/dev/null`;
  my $cfg = {};
  my $okSecretKeys = join "|", @secretKeys;
  for my $line(@lines){
    if($line =~ /^website\.($okSecretKeys)\s*=\s*(.+)$/){
      $$cfg{$1} = $2;
    }
  }
  for my $key(sort @secretKeys){
    die "Missing secret '$key' in $secretsFile\n" if not defined $$cfg{$key};
  }
  return $cfg;
}

&main(@ARGV);
