#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

sub setBackground($);
sub remove($@);
sub getFiles($);

my $setExec = "Esetroot";
my $delay = 300;
my $verbose = 1;

my @exts = qw(jpg jpeg png gif bmp);

my $usage = "Usage:
  $0 [OPTS] DIR
    Select an image from DIR every ${delay}s and apply it with $setExec

  OPTS
    -q
      do not print wallpaper names as they are selected
      suppress output from $setExec

    --exclude=PATTERN
      do not include paths that match PATTERN
      PATTERN is a perl regex that does not contain any kind of bracket
      i.e.: '[', ']', '(', ')', '{', '{'
";

sub main(@){
  my $verbose = 1;
  my $excludePattern = undef;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-q)$/){
      $verbose = 0;
    }elsif($arg =~ /^--exclude=(.*)$/){
      $excludePattern = $1;
      if($excludePattern =~ /[(){}\[\]]/){
        die "Invalid pattern, no brackets are allowed: $excludePattern\n";
      }
    }else{
      die $usage;
    }
  }

  my $dir = shift;
  die $usage if not defined $dir or @_ > 0;

  my $curFile;
  while(1){
    if(-d $dir){
      my @files = getFiles($dir);
      if(defined $excludePattern){
        @files = grep {$_ !~ /$excludePattern/i} @files;
      }
      @files = remove $curFile, @files if defined $curFile;
      if(@files > 0){
        my $i = rand @files;
        $curFile = $files[$i];
        setBackground $curFile;
      }
    }
    sleep $delay;
  }
}

sub setBackground($){
  my $file = shift;
  print "$file\n" if $verbose;
  $file =~ s/'/'\\''/g;
  my $redirect = $verbose ? '' : ">/dev/null 2>/dev/null";
  system "$setExec '$file' $redirect";
}

sub remove($@){
  my ($elem, @arr) = @_;
  my @newArr;
  for my $e(@arr){
    push @newArr, $e unless $elem eq $e;
  }
  return @newArr;
}

sub getFiles($){
  my $dir = shift;
  my @exts = map { ("-or", "-iname", "*.$_") } @exts;
  open FH, "-|", "find", $dir, "-false", @exts;
  my @files = <FH>;
  chomp foreach @files;
  return @files;
}

&main(@ARGV);
