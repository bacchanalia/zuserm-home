#!/usr/bin/perl
use strict;
use warnings;

sub mountIso($$);
sub mountVfat($$);
sub umount($);
sub getMountpoint($);
sub run(@);
sub tryrun(@);

my $usage = "Usage:
  $0 ISO_FILE VFAT_PARTITION_BLOCK_DEVICE_PATH
    format your device to FAT32 first
    e.g.: $0 ~/Downloads/siduction-14.1.0-amd64.iso /dev/sdc1
";

sub main(@){
  die $usage if @_ != 2;
  my ($iso, $device) = @_;
  die "ISO_FILE \"$iso\" does not exist\n" if not -f $iso;
  die "\"$device\" is not a block device\n" if not -b $device;

  my $isoName = $iso;
  $isoName =~ s/^.*\/([^\/]*)$/$1/;
  $isoName =~ s/\W+/_/g;
  $isoName = lc $isoName;

  my $isoDir = "/media/iso-bootusb-$isoName";

  my $deviceName = $device;
  $deviceName =~ s/^.*\/([^\/]*)$/$1/;
  $deviceName =~ s/\W+/_/g;
  $deviceName = lc $deviceName;

  my $rawDevice = $device;
  die "Could not guess raw device for $device\n" if $rawDevice !~ s/\d+$//;
  die "raw device \"$rawDevice\" is not a block device\n" if not -b $rawDevice;

  my $usbStickDir = "/media/usb-bootusb-$deviceName";
  my $curMountPoint = getMountpoint $device;

  print "\n#mounting ISO\n";
  umount $isoDir if `mount` =~ $isoDir;
  mountIso $iso, $isoDir;

  print "\n#mounting USB stick\n";
  umount $curMountPoint if defined $curMountPoint;
  mountVfat $device, $usbStickDir;

  print "\n#copying ISO=>USB\n";
  run "date";
  run "sudo", "rsync", "-avP", "$isoDir/", "$usbStickDir/";
  run "date";
  run "sync";
  run "date";
  tryrun "alarm", "-s", "success";
  run "sudo", "rename", "s/isolinux/syslinux/", "$usbStickDir/boot/isolinux";
  run "sudo", "rename", "s/isolinux/syslinux/",
    glob "$usbStickDir/boot/syslinux/isolinux.*";

  print "\n#unmounting\n";
  umount $isoDir;
  umount $usbStickDir;

  print "\n#syslinux on USB device\n";
  run "sudo", "syslinux", "-s", $device;

  print "\n#set boot flag\n";
  run "sudo", "parted", $rawDevice, "set", "1", "boot", "on";
}

sub mountIso($$){
  my ($iso, $dir) = @_;
  run "sudo", "mkdir", "-p", $dir;
  run "sudo", "mount", "-o", "ro,loop", $iso, $dir;
}

sub mountVfat($$){
  my ($device, $dir) = @_;
  run "sudo", "mkdir", "-p", $dir;
  run "sudo", "mount", "-t", "vfat", $device, $dir;
}

sub umount($){
  my ($dir) = @_;
  run "sudo", "umount", $dir;
  run "sudo", "rmdir", $dir;
}

sub getMountpoint($){
  my ($dev) = @_;
  for my $line(`mount`){
    if($line =~ /^$dev on (.*) type \w+ \(\S+\)$/){
      return $1;
    }
  }
  return undef;
}

sub run(@){
  tryrun @_;
  die "error running \"@_\"\n" if $? != 0;
}

sub tryrun(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
