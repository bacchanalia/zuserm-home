#!/usr/bin/perl
use strict;
use warnings;
use Term::ANSIColor;

my $dir = $ENV{HOME};
my $todoFile = "$dir/TODO";
my $notesFile = "$dir/NOTES";

my $okFmtArgs = join "|", qw(-q -u -r -a --qtodo --html --ff);
my $usage = "Usage:
  $0 [--dir=DIR] --add TODO [TODO ..]
    Add todos not in git history to $todoFile

  $0 [--dir=DIR] [--notes] [FORMAT]
    Parse ${todoFile}'s git history to print todos

  FORMAT:
    -q       dont print todos
    -u       print unresolved, outstanding todos only
    -r       print resolved todos only
    -a       print all todos, unresolved first {default}
    --qtodo  print all todos as xml for qtodo
    --html   print all todos as html
    --ff     write all todos as html to a tmp file and open it with firefox

  OPTS
    --dir=DIR
       use DIR/TODO and DIR/NOTES instead of
       $todoFile and $notesFile

    --notes  include entries in $notesFile in output
";

my %resColor = (
  FIXED => 'white bold',
  NONE => 'red bold',
  DISCARDED => 'blue bold',
  NOTE => 'green bold',
);
my %resQtodoColor = (
  FIXED => 'green',
  NONE => 'red',
  DISCARDED => 'yellow',
  NOTE => 'blue',
);
my %resHTMLStyle = (
  FIXED => 'color:black; font-weight:bold',
  NONE => 'color:red; font-weight:bold',
  DISCARDED => 'color:blue; font-weight:bold',
  NOTE => 'color:green; font-weight:bold',
);
my %resSym = (
  FIXED => 'x',
  NONE => ' ',
  DISCARDED => '~',
  NOTE => '!',
);
my %resFinished = (
  FIXED => 1,
  NONE => 0,
  DISCARDED => 1,
  NOTE => 0,
);

my $TYPE_ADD = 'add';
my $TYPE_RESOLVE = 'resolve';

sub getPrefix($$);
sub getSeparator($);
sub getSuffix($);
sub getTodoEvents($$$$);
sub sortTodoEvents($);
sub flattenTodoEvents($);
sub getFlatTodo($$$);
sub todoFmt($);
sub qtodoFmt($);
sub htmlTodoFmt($);
sub dateFmt($);
sub dateFmtNow();
sub col($$);

sub main(@){
  if(@_ > 0 and $_[0] =~ /^--dir=(.*)$/){
    shift;
    $dir = $1;
    $todoFile = "$dir/TODO";
    $notesFile = "$dir/NOTES";
    die "$dir is not a dir\n" if not -d $dir;
  }
  chdir $dir;

  my $notes = shift if @_ > 0 and $_[0] =~ /^(--notes)$/;

  my @todosToAdd;
  my $fmtArg = '-a';
  if(@_ > 1 and $_[0] eq '--add'){
    shift;
    @todosToAdd = @_;
  }elsif(@_ > 0 and $_[0] =~ /^($okFmtArgs)$/){
    $fmtArg = shift;
  }elsif(@_ > 0){
    die $usage;
  }

  my $todoEvents = {};

  my $diff = `git diff $todoFile`;
  getTodoEvents $diff, time(), '', $todoEvents if length $diff > 0;

  for my $entry(`git log --format=format:"%H:::%at:::%s" $todoFile`){
    if($entry =~ /^([a-f0-9]+):::(\d+):::(.*)$/){
      my ($commit, $date, $summary) = ($1, $2, $3);
      my $diff = `git diff-tree --cc $commit`;
      getTodoEvents $diff, $date, $summary, $todoEvents;
    }else{
      die "malformed git log line: $entry";
    }
  }

  sortTodoEvents $todoEvents;

  for my $todo(keys %$todoEvents){
    my @events = @{$$todoEvents{$todo}};
    my $added = 0;
    for my $event(@events){
      if($$event{type} eq $TYPE_ADD){
        $added = 1;
      }elsif($$event{type} eq $TYPE_RESOLVE){
        die "todo resolved before added: $todo\n" if not $added;
        $added = 0;
      }
    }
  }

  if(@todosToAdd > 0){
    my @todoPrefixLines;
    for my $todo(@todosToAdd){
      $todo = lc $todo;
      $todo =~ s/^\s*//;
      $todo =~ s/\s*$//;
      $todo =~ s/^-//;
      if(not defined $$todoEvents{$todo}){
        print STDERR "appending todo: '$todo'\n";
        push @todoPrefixLines, "$todo\n";
      }
    }
    if(@todoPrefixLines > 0){
      open FH, "< $todoFile" or die "Couldnt read $todoFile\n";
      my @lines = <FH>;
      close FH;
      @lines = (@todoPrefixLines, @lines);
      open FH, "> $todoFile" or die "Couldnt read $todoFile\n";
      print FH @lines;
      close FH;
    }
    return 0;
  }

  my $fmtSub;
  if($fmtArg =~ /^(--qtodo)$/){
    $fmtSub = \&qtodoFmt;
  }elsif($fmtArg =~ /^(--html|--ff)/){
    $fmtSub = \&htmlTodoFmt;
  }else{
    $fmtSub = \&todoFmt;
  }

  my $count = 0;

  if(defined $notes and -e $notesFile){
    for my $note(`cat $notesFile`){
      chomp $note;
      next if $note =~ /^\s*$/;
      $count++;
      my $addDate = time;
      my $noteFlatTodo = {
        todo => $note,
        addDate => $addDate,
        addDateFmt => dateFmt $addDate,
        resolveDate => undef,
        resolveDateFmt => "",
        resolution => "NOTE",
        count => $count,
      };
      $$noteFlatTodo{todoFormat} = &$fmtSub($noteFlatTodo);
    }
  }
  my @flatTodos = @{flattenTodoEvents $todoEvents};

  $$_{count} = $count++ foreach @flatTodos;

  for my $flatTodo(@flatTodos){
    $$flatTodo{todoFormat} = &$fmtSub($flatTodo);
  }

  @flatTodos = sort {
    my $aAddDate = defined $$a{addDate} ? $$a{addDate} : 0;
    my $bAddDate = defined $$b{addDate} ? $$b{addDate} : 0;
    my $aResolveDate = defined $$a{resolveDate} ? $$a{resolveDate} : 0;
    my $bResolveDate = defined $$b{resolveDate} ? $$b{resolveDate} : 0;

    my %resSort = (NOTE => 0, NONE => 1, FIXED => 2, DISCARDED => 3);
    return 0
      || $resSort{$$a{resolution}} <=> $resSort{$$b{resolution}}
      || $bResolveDate <=> $aResolveDate
      || $bAddDate <=> $aAddDate
  } @flatTodos;

  my (@resolvedFmts, @unresolvedFmts);
  for my $flatTodo(@flatTodos){
    if($resFinished{$$flatTodo{resolution}}){
      push @resolvedFmts, $$flatTodo{todoFormat};
    }else{
      push @unresolvedFmts, $$flatTodo{todoFormat};
    }
  }

  my $msg = '';
  $msg .= getPrefix($fmtArg, $count);
  $msg .= join '', @unresolvedFmts unless $fmtArg =~ /^(-q|-r)$/;
  $msg .= getSeparator($fmtArg) unless $fmtArg =~ /^(-q|-r|-u)$/;
  $msg .= join '', @resolvedFmts unless $fmtArg =~ /^(-q|-u)$/;
  $msg .= getSuffix($fmtArg);

  if($fmtArg =~ /^(--ff)$/){
    my $tmpFile = "/tmp/parse-todo-" . time() . ".html";
    open FH, "> $tmpFile" or die "Couldnt write to $tmpFile\n";
    print FH $msg;
    close FH;
    system "firefox", $tmpFile;
  }else{
    print $msg;
  }
}

sub getPrefix($$){
  my ($fmtArg, $count) = @_;
  if($fmtArg =~ /qtodo/){
    return ""
      . "<?xml version='1.0' encoding='UTF-8'?>\n"
      . "<root max_id=\"$count\">\n"
      ;
  }elsif($fmtArg =~ /^(--html|--ff)$/){
    return "<html>\n<body style=\"font-family: monospace\">\n<table>\n";
  }else{
    return "";
  }
}
sub getSeparator($){
  my $fmtArg = shift;
  if($fmtArg =~ /qtodo/){
    return "";
  }elsif($fmtArg =~ /^(--html|--ff)$/){
    return "</table>\n<table>\n";
  }else{
    return "\n\n\n";
  }
}
sub getSuffix($){
  my $fmtArg = shift;
  if($fmtArg =~ /qtodo/){
    return "</root>\n"
  }elsif($fmtArg =~ /^(--html|--ff)$/){
    return "</table>\n</body>\n<html>\n";
  }else{
    return "";
  }
}

sub getTodoEvents($$$$){
  my ($diff, $date, $summary, $todoEvents) = @_;
  my $resolution = $summary =~ /finish|complete|fix/i ? 'FIXED' : 'DISCARDED';

  my %adds;
  my %resolves;
  for my $line(split /\n/, $diff){
    if($line =~ /^\+-?([^\-+].*)$/){
      $adds{lc $1} = 1;
    }elsif($line =~ /^--?([^\-+].*)$/){
      $resolves{lc $1} = 1;
    }
  }

  for my $todo(keys %adds){
    if(defined $resolves{$todo}){
      #todo rearranged
      delete $adds{$todo};
      delete $resolves{$todo};
    }
  }

  for my $todo(keys %adds){
    if(not defined $$todoEvents{$todo}){
      $$todoEvents{$todo} = [];
    }
    push @{$$todoEvents{$todo}}, {type=>$TYPE_ADD, date=>$date};
  }

  for my $todo(keys %resolves){
    if(not defined $$todoEvents{$todo}){
      $$todoEvents{$todo} = [];
    }
    push @{$$todoEvents{$todo}}, {type=>$TYPE_RESOLVE, date=>$date, resolution=>$resolution};
  }
}

sub sortTodoEvents($){
  my ($todoEvents) = @_;
  for my $todo(keys %$todoEvents){
    my @events = @{$$todoEvents{$todo}};
    @events = sort { $$a{date} <=> $$b{date} } @events;
    $$todoEvents{$todo} = [@events];
  }
}

sub flattenTodoEvents($){
  my ($todoEvents) = @_;

  my $flatTodos = [];
  for my $todo(keys %$todoEvents){
    my @events = @{$$todoEvents{$todo}};
    my $curAddEvent = undef;
    my $curResolveEvent = undef;
    for my $event(@events){
      if($$event{type} eq $TYPE_ADD){
        if(defined $curAddEvent){
          push @$flatTodos, getFlatTodo $todo, $curAddEvent, $curResolveEvent;
          $curResolveEvent = undef;
        }
        $curAddEvent = $event;
      }elsif($$event{type} eq $TYPE_RESOLVE){
        $curResolveEvent = $event;
      }
    }
    if(defined $curAddEvent){
      push @$flatTodos, getFlatTodo $todo, $curAddEvent, $curResolveEvent;
    }
  }

  $flatTodos = [sort {$$a{addDate} <=> $$b{addDate}} @$flatTodos];

  return $flatTodos;
}

sub getFlatTodo($$$){
  my ($todo, $addEvent, $resolveEvent) = @_;
  my $flatTodo = {};
  $$flatTodo{todo} = $todo;
  $$flatTodo{addDate} = defined $addEvent ? $$addEvent{date} : undef;
  $$flatTodo{resolveDate} = defined $resolveEvent ? $$resolveEvent{date} : undef;
  $$flatTodo{resolution} = defined $resolveEvent ? $$resolveEvent{resolution} : 'NONE';

  $$flatTodo{addDateFmt} = "";
  if(defined $$flatTodo{addDate}){
    $$flatTodo{addDateFmt} = dateFmt $$flatTodo{addDate};
  }
  $$flatTodo{resolveDateFmt} = "";
  if(defined $$flatTodo{resolveDate}){
    $$flatTodo{resolveDateFmt} = dateFmt $$flatTodo{resolveDate};
  }
  return $flatTodo;
}

sub todoFmt($){
  my ($flatTodo) = @_;
  my ($todo, $resolution, $dateAdded, $dateResolved, $num) = (
    $$flatTodo{todo}, $$flatTodo{resolution},
    $$flatTodo{addDateFmt}, $$flatTodo{resolveDateFmt},
    $$flatTodo{count}
  );

  my $sym = $resSym{$resolution};
  my $color = $resColor{$resolution};

  return ''
    . "[$sym]"
    . " $dateAdded"
    . col($color, " $todo")
    . (defined $dateResolved and $dateResolved ne "" ? " {$dateResolved}" : '')
    . "\n"
    ;
}

sub qtodoFmt($){
  my ($flatTodo) = @_;
  my ($todo, $resolution, $dateAdded, $dateResolved, $num) = (
    $$flatTodo{todo}, $$flatTodo{resolution},
    $$flatTodo{addDateFmt}, $$flatTodo{resolveDateFmt},
    $$flatTodo{count}
  );

  $todo =~ s/&/\&amp;/g;
  $todo =~ s/</\&lt;/g;
  $todo = lc $todo;
  my $color = $resQtodoColor{$resolution};

  return ''
    . "  <to-do"
    . ($resFinished{$resolution} ? " done=\"true\"" : '')
    . " id=\"$num\""
    . " color=\"$color\""
    . ">"
    . $todo
    . "</to-do>"
    . "\n"
    ;
}

sub htmlTodoFmt($){
  my ($flatTodo) = @_;
  my ($todo, $resolution, $dateAdded, $dateResolved, $num) = (
    $$flatTodo{todo}, $$flatTodo{resolution},
    $$flatTodo{addDateFmt}, $$flatTodo{resolveDateFmt},
    $$flatTodo{count}
  );
  my $sym = $resSym{$resolution};

  $todo =~ s/&/\&amp;/g;
  $todo =~ s/</\&lt;/g;
  $todo = lc $todo;
  my $style = $resHTMLStyle{$resolution};

  return ''
    . "  <tr>\n"
    . "    <td>[$sym]</td>\n"
    . "    <td>$dateAdded</td>\n"
    . "    <td style=\"$style\">$todo</td>\n"
    . "  </tr>\n"
    ;
}

sub dateFmt($){
  my $d = `date -d \@$_[0] +'%Y-%m-%d %H:%M'`;
  chomp $d;
  return $d;
}
sub dateFmtNow(){
  return dateFmt time;
}

sub col($$){
  return color($_[0]) . $_[1] . color('reset');
}

&main(@ARGV);
