#!/usr/bin/perl
use strict;
use warnings;

my $sshCmd = "autossh";
my $localPort = 22;
my $localHost = "localhost";
my $secretsFile = "$ENV{HOME}/.secrets";
my @sshOpts = ();
my @unsafeSshOpts = (
  "NoHostAuthenticationForLocalhost=yes",
  "UserKnownHostsFile=/dev/null",
  "StrictHostKeyChecking=no",
);

sub readSecrets();
sub run(@);

my @configKeys = qw(user host port localport);
my @requiredKeys = qw(user host port localport);

my $usage = "Usage:
  $0 OPTS [[USER@]HOST PORT]
    set up a reverse SSH tunnel to HOST as USER on PORT

    if no args are given, USER/HOST/PORT default to
      revtun.user/revtun.host/revtun.port from $secretsFile

  OPTS:
    --local[=LOCAL_PORT]
      use normal port forwarding instead of reverse, i.e.: -L instead of -R,
        and use LOCAL_PORT instead of $localPort
        if LOCAL_PORT is not given, read revtun.localport from $secretsFile

    --unsafe
      use @unsafeSshOpts
";

sub main(@){
  my ($host, $port);
  my $config;

  my $local = 0;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(--unsafe)$/){
      @sshOpts = (@sshOpts, @unsafeSshOpts);
    }elsif($arg =~ /^--local(?:=(\d+))?$/){
      $local = 1;
      if(defined $1){
        $localPort = $1;
      }else{
        $config = readSecrets() if not defined $config;
        $localPort = $$config{localport};
      }
    }else{
      die $usage;
    }
  }

  if(@_ == 0){
    $config = readSecrets() if not defined $config;
    $host = "$$config{user}\@$$config{host}";
    $port = $$config{port};
  }elsif(@_ == 2 and $_[1] =~ /^\d+$/){
    $host = $_[0];
    $port = $_[1];
  }else{
    die $usage;
  }

  my @opts = map {("-o", $_)} @sshOpts;

  if($local){
    run "$sshCmd", "-L", "$localPort:$localHost:$port", $host, @opts;
  }else{
    run "$sshCmd", "-R", "$port:$localHost:$localPort", $host, @opts;
  }
}

sub readSecrets(){
  my @lines = `cat $secretsFile 2>/dev/null`;
  my $cfg = {};
  my $okConfigKeys = join "|", @configKeys;
  for my $line(@lines){
    if($line =~ /^revtun\.($okConfigKeys)\s*=\s*(.+)$/){
      $$cfg{$1} = $2;
    }
  }
  for my $key(sort @requiredKeys){
    die "Missing config '$key' in $secretsFile\n" if not defined $$cfg{$key};
  }
  return $cfg;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
