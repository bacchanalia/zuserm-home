#!/usr/bin/perl
use strict;
use warnings;

sub writeConfig($$);
sub bashComplete($$);

my $romDir = "$ENV{HOME}/Desktop/Games/nes";

my $configFile = "$ENV{HOME}/.fceux/fceux.cfg";

my $config = {
  "XScale"                          => "4.000000",
  "YScale"                          => "4.000000",
  "Hotkeys.MovieToggleFrameDisplay" => 0,
  "Hotkeys.LagCounterDisplay"       => 0,
};

my $kbPad = {
  DeviceType => "Keyboard",
  DeviceNum  => 0,
  Up         => 119,
  Down       => 115,
  Left       => 97,
  Right      => 100,
  A          => 46,
  B          => 47,
  Start      => 13,
  Select     => 303,
  TurboA     => 0,
  TurboB     => 0,
};
my $sixaxisPad = {
  DeviceType => "Joystick",
  DeviceNum  => 0,
  Up         => 4,
  Down       => 6,
  Left       => 7,
  Right      => 5,
  A          => 14,
  B          => 15,
  Start      => 3,
  Select     => 0,
  TurboA     => 0,
  TurboB     => 0,
};
my $defaultPad = $kbPad;

my $usage = "Usage:
  $0 [--kb|--sixaxis] ROM
     ROM is a relative file path, or a file in $romDir

    --kb
      use keyboard for gamepad
    --sixaxis
      use sixaxis joystick for gamepad

  $0 --bash-complete COMP_LINE COMP_POINT
     print a list of words for bash completion, one per line
     COMP_LINE  - the full cmdline as a string
     COMP_POINT - the cursor position in the cmdline
";

sub main(@){
  if(@_ == 3 and $_[0] =~ /^--bash-complete$/ and $_[2] =~ /^\d+$/){
    print map {"$_\n"} bashComplete($_[1], $_[2]);
    exit 0;
  }

  my $gamepad = shift if @_ > 0 and $_[0] =~ /^(--kb|--sixaxis)$/;
  die $usage if @_ != 1;
  my $rom = shift;
  $rom = "$romDir/$rom" if -f "$romDir/$rom";
  die "rom not found: $rom\n" if not -f $rom;

  my $pad = $defaultPad;
  $pad = $kbPad if defined $gamepad and $gamepad =~ /^(--kb)$/;
  $pad = $sixaxisPad if defined $gamepad and $gamepad =~ /^(--sixaxis)$/;

  my $cfg = {};
  for my $key(sort keys %$config){
    $$cfg{"SDL.$key"} = $$config{$key};
  }
  for my $key(sort keys %$pad){
    $$cfg{"SDL.Input.GamePad.0$key"} = $$pad{$key};
  }

  writeConfig $configFile, $cfg;

  exec "fceux", "--nogui", $rom;
}

sub writeConfig($$){
  my ($configFile, $cfg) = @_;
  open FH, "< $configFile" or die "Could not read $configFile\n";
  my @lines = <FH>;
  close FH;

  for my $line(@lines){
    next if $line =~ /^\s*#.*/;
    for my $key(keys %$cfg){
      if($line =~ /^$key\s*=/){
        $line = "$key = $$cfg{$key}\n";
        delete $$cfg{$key};
      }
    }
  }

  die "missing config:\n" . (join "\n", keys %$cfg) . "\n" if keys %$cfg > 0;

  open FH, "> $configFile" or die "Could not write $configFile\n";
  print FH @lines;
  close FH;
}

sub bashComplete($$){
  my ($cmdLine, $pos) = @_;
  my $cmd = substr $cmdLine, 0, $pos;
  my $isNewWord = $cmd =~ /\s$/;
  $cmd =~ s/^\s+//;
  $cmd =~ s/\s+$//;

  my @words = split /\s+/, $cmd;
  shift @words;
  my $cur = pop @words if not $isNewWord;

  my @opts = qw(
    --kb
    --sixaxis
  );

  return @opts if defined $cur and $cur =~ /^-/;

  my @roms = glob "$romDir/*.nes";
  s/^$romDir\/// foreach @roms;
  s/'/'\\''/g foreach @roms;
  @roms = map {"'$_'"} @roms;
  return (@roms, @opts);
}

&main(@ARGV);
