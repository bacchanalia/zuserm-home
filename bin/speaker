#!/usr/bin/perl
use strict;
use warnings;

my $usage = "Usage:
  $0 [-g|--get|get]
    Print all speaker card names, prefixing the default with \"*\"

  $0 -d|--default|default
    Print just the default speaker card name {with no prefix}

  $0 -s|--set|set CARD_PATTERN
    Set as default the lowest-indexed speaker that matches CARD_PATTERN
    CARD_PATTERN is a case insensitive regex that cannot contain ( or )
    {does nothing if already set as default}

  $0 -c|--cycle|cycle
    Set as default the lowest-indexed speaker with index larger than this one,
    or the lowest-indexed speaker if none are larger than this one.
";

sub getSinks();
sub formatSinks($);
sub cycle();
sub setDefault($);

my $pacmd = "pacmd";
my $pactl = "pactl";
my $pulseVol = "pulse-vol";
my $klompCmd = "klomp-cmd";

sub main(@){
  my $cmd = shift;
  $cmd = '-g' if not defined $cmd;

  if(@_ == 0 and $cmd =~ /^(-g|--get|get)$/){
    print formatSinks(0);
  }elsif(@_ == 0 and $cmd =~ /^(-d|--default|default)$/){
    print formatSinks(1);
  }elsif(@_ == 1 and $cmd =~ /^(-s|--set|set)$/){
    my $cardPtrn = shift;
    die "CARD_PATTERN cannot contain ( or )\n" if $cardPtrn =~ /[()]/;
    my $old = formatSinks(1);
    for my $sink(getSinks()){
      if($$sink{name} =~ /$cardPtrn/){
        setDefault $$sink{index};
        last;
      }
    }
    my $new = formatSinks(1);
    print "$old=>\n$new\n" if $old ne $new;
  }elsif(@_ == 0 and $cmd =~ /^(-c|--cycle|cycle)$/){
    my $old = formatSinks(1);
    cycle();
    my $new = formatSinks(1);
    print "$old=>\n$new\n" if $old ne $new;
  }else{
    die $usage;
  }
}

sub getSinks(){
  my $default = `$pacmd list-sinks | grep '  \\* index: [0-9]\\+'`;
  $default =~ s/\D*//g;
  $default = -1 if $default eq '';
  my @sinks;
  for my $sink(`$pactl list short sinks`){
    my @cols = split "\t", $sink;
    next if @cols != 5;
    my %sink;
    $sink{default} = $cols[0] == $default;
    $sink{index} = $cols[0];
    $sink{name} = $cols[1];
    $sink{module} = $cols[2];
    $sink{sample} = $cols[3];
    $sink{state} = $cols[4];
    push @sinks, \%sink;
  }
  @sinks = sort {$$a{index} <=> $$b{index}} @sinks;
  return @sinks;
}

sub formatSinks($){
  my $defaultOnly = shift;
  my $out = '';
  for my $s(getSinks){
    if($defaultOnly){
      next if not $$s{default};
    }else{
      $out .= $$s{default} ? "* " : "  ";
    }
    $out .= "$$s{name}\n";
  }
  return $out;
}

sub cycle(){
  my @sinks = getSinks();
  return if @sinks == 0;

  my $curIndex = -1;
  for my $s(getSinks){
    if($$s{default}){
      $curIndex = $$s{index};
      last;
    }
  }

  my @indices = sort map {$$_{index}} @sinks;

  my $target = $indices[0];
  for my $i(@indices){
    if($i > $curIndex){
      $target = $i;
      last;
    }
  }
  setDefault $target;
}

sub setDefault($){
  my $index = shift;
  system "$pulseVol update-volume";
  system "$pacmd set-default-sink $index > /dev/null 2>/dev/null";
  system "$klompCmd restart";
}

&main(@ARGV);
