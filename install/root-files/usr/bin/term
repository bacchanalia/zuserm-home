#!/usr/bin/perl
use strict;
use warnings;

my $titleArgs = "-t|--title|-T|-title";
my $cwdArgs = "--working-directory|-cd";
my $autoCwdArgs = "--auto-working-directory|-acd";
my $waitArgs = "--wait|-wait";

my $usage = "Usage:
  $0 [OPTS] [CMD [ARG ARG ... ]]
  $0 [OPTS] SHELLCMD
  $0 -h|--help

  Provids a consistent cli to several terminal emulators.
  Spawns the terminal and disowns it {this is bash-specific}
  If SHELLCMD has a space in it, its executed in bash.
  e.g.:
    $0 \"echo 'bananas; apples; oranges'; sleep 2\"
    $0 --title 'log search' --working-directory / find -iname '*.log'

  OPTS
    $titleArgs TITLE
      sets the window title on terminals that support it
    $cwdArgs PATH
      sets the current working directory on terminals that support it
    $autoCwdArgs
      sets the current working directory to the current window as follows:
        -extract the PID of the current window {using xdotool}
        -use a child PID instead if it exists {using ps}
        -extract the PWD of the PID {using pwdx}
        -set the PWD like [$cwdArgs]
    $waitArgs
      wait for the terminal to exit
";

sub urxvt($$);
sub mtermite($$);
sub meegoTerminal($$);
sub gnomeTerminal($$);
sub xterm($$);

sub isInstalled($);
sub procChomp(@);
sub extractActiveCwd();
sub wrapToken($);

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;

  my %termArgs;
  while(1){
    if(@_ > 1 and $_[0] =~ /^($titleArgs)$/){
      shift;
      $termArgs{title} = wrapToken(shift());
    }elsif(@_ > 1 and $_[0] =~ /^($cwdArgs)$/){
      shift;
      $termArgs{cwd} = wrapToken(shift());
    }elsif(@_ > 0 and $_[0] =~ /^($autoCwdArgs)$/){
      shift;
      my $cwd = extractActiveCwd();
      if(defined $cwd){
        $termArgs{cwd} = wrapToken $cwd;
      }
    }elsif(@_ > 0 and $_[0] =~ /^($waitArgs)$/){
      shift;
      $termArgs{wait} = 1;
    }else{
      last;
    }
  }

  my @cmd = map {wrapToken $_} @_;

  @cmd = ("bash", "-c", @cmd) if @cmd == 1 and $cmd[0] =~ / /;

  if(isInstalled "urxvt"){
    @cmd = urxvt \%termArgs, \@cmd;
  }elsif(isInstalled "/opt/mtermite/bin/mtermite"){
    @cmd = mtermite \%termArgs, \@cmd;
  }elsif(isInstalled "meego-terminal"){
    @cmd = meegoTerminal \%termArgs, \@cmd;
  }elsif(isInstalled "gnome-terminal"){
    @cmd = gnomeTerminal \%termArgs, \@cmd;
  }elsif(isInstalled "xterm"){
    @cmd = xterm \%termArgs, \@cmd;
  }

  if(defined $termArgs{wait} and $termArgs{wait}){
    exec "bash", "-c", "@cmd";
  }else{
    exec "bash", "-c", "@cmd & disown";
  }
}

sub urxvt($$){
  my %args = %{shift()};
  my @cmd = @{shift()};

  @cmd = ("-e", @cmd) if @cmd > 0;
  @cmd = ('-title', $args{title}, @cmd) if defined $args{title};
  @cmd = ('-cd', $args{cwd}, @cmd) if defined $args{cwd};
  @cmd = ('urxvt', @cmd);

  return @cmd;
}

sub mtermite($$){
  my %args = %{shift()};
  my @cmd = @{shift()};

  if(@cmd > 0){
    my $c = "@cmd";
    $c =~ s/"/\\"/g;
    if(isInstalled("aegis-exec")){
      @cmd = ("-e", "aegis-exec bash -i -c \"$c\"");
    }else{
      @cmd = ("-e", "bash -i -c \"$c\"");
    }
  }
  @cmd = ('/opt/mtermite/bin/mtermite', '-n', @cmd);

  return @cmd;
}

sub meegoTerminal($$){
  my %args = %{shift()};
  my @cmd = @{shift()};

  if(@cmd > 0){
    my $c = "@cmd";
    $c =~ s/"/\\"/g;
    if(isInstalled("aegis-exec")){
      @cmd = ("-e", "aegis-exec bash -i -c \"$c\"");
    }else{
      @cmd = ("-e", "bash -i -c \"$c\"");
    }
  }
  @cmd = ('meego-terminal', '-n', @cmd);

  return @cmd;
}

sub gnomeTerminal($$){
  my %args = %{shift()};
  my @cmd = @{shift()};

  @cmd = ("-x", @cmd) if @cmd > 0;
  @cmd = ('--title', $args{title}, @cmd) if defined $args{title};
  @cmd = ('--working-directory', $args{cwd}, @cmd) if defined $args{cwd};
  @cmd = ('gnome-terminal', '--disable-factory', @cmd);

  return @cmd;
}

sub xterm($$){
  my %args = %{shift()};
  my @cmd = @{shift()};

  @cmd = ("-e", @cmd) if @cmd > 0;
  @cmd = ('-title', $args{title}, @cmd) if defined $args{title};
  @cmd = ('xterm', @cmd);

  return @cmd;
}

sub isInstalled($){
  my $term = shift;
  system "bash -c 'command -v $term' > /dev/null 2>&1";
  return $? == 0;
}

sub procChomp(@){
  my $out = `@_`;
  chomp $out;
  return $out;
}

sub extractActiveCwd(){
  my $activeWin = procChomp "xdotool getactivewindow";
  return undef if $activeWin !~ /^\d+$/;

  my $activePid = procChomp "xdotool getwindowpid $activeWin";
  return undef if $activePid !~ /^\d+$/;

  for my $line(`ps -e -o pid= -o ppid=`){
    if($line =~ /^\s*(\d+)\s*$activePid\s*$/){
      $activePid = $1;
      last;
    }
  }

  my $pwd = procChomp "pwdx $activePid";
  if($pwd =~ /^$activePid:\s*(.*)$/){
    return $1;
  }
  return undef;
}

sub wrapToken($){
  my $s = shift;
  $s =~ s/'/'\\''/g;
  return "'$s'";
}

&main(@ARGV);
