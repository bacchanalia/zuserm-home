#!/usr/bin/perl
use strict;
use warnings;

sub absolutePath($);
sub assertBool($);
sub assertIP($);
sub assertMac($);
sub fingerprint($);
sub ensureFingerprint($$);
sub parseConfig($);
sub hostsMarker($);
sub readHostsIP($);
sub setHostsIP($$);
sub sudoSetHostsIP($$);
sub getTmpFile($);
sub readTmpFile($);
sub writeTmpFile($$);
sub quickPingable($);
sub ifup($$);
sub sudoIfup($$);
sub getDefaultGatewayMac();
sub usb($$);
sub wifi($$);
sub guess($$);
sub isEqual($$);

my $ifconfigExec = '/sbin/ifconfig';
my $iwconfigExec = '/sbin/iwconfig';

my $confDir = "$ENV{HOME}/.config/ipmagic";
my @confFiles = `ls \"$confDir\" 2>/dev/null`;
chomp foreach @confFiles;

my $defaultPreBashCommand = '[ -f ~/.bashrc ] && . ~/.bashrc';

my $methods = join "|", qw(any tmp usb wifi guess);

my $byteRegex = "[0-9a-fA-F]{2}";
my $macRegex = join ":", ($byteRegex) x 6;
my $ipRegex = "\\d+\\.\\d+\\.\\d+\\.\\d+";

my $usage = "Usage:
    $0 -h|--help
      print this usage

    $0 --set-hosts HOSTNAME IP
      remove any lines in /etc/hosts that match:
        \"###.###.###.###\t<HOSTNAME>#ipmagic:<HOSTNAME>\"
      add the following to /etc/hosts: \"<IP>\t<HOSTNAME>#ipmagic:<HOSTNAME>\"

    $0 --remove-hosts HOSTNAME
      remove any lines in /etc/hosts that match:
        \"###.###.###.###\t<HOSTNAME>#ipmagic:<HOSTNAME>\"

    $0 --ifup DEV IP
      ifup the DEV with the IP

    $0 CONF [OPTS]
    $0 CONF [OPTS] --host
      print the hostname and exit, doing nothing else

    $0 CONF [OPTS] --ip
      setup method, print the IP, and exit {dont set up hosts}

    $0 CONF [OPTS] -t|--tmp [IP]
      write IP to a tmp file, or if IP is not given, remove tmp file.
      the tmp file is read first while setting up the hosts file,
        and overrides all other methods of finding an ip
      tmp file is: /tmp/ipmagicCONFIG_FILE.tmp
        where CONFIG_FILE is the abs path to the config file,
          with forward slashes \"/\" replaced with underscores \"_\"
          e.g.: /tmp/ipmagic_home_user_raspberrypi.conf.tmp

    $0 CONF [OPTS] [ACTION]
      setup hosts file, init devices, and optionally perform an action
      ACTIONS:
        -s [CMD ARG ARG..]  ssh to host

        CMD [ARG ARG..]     ssh with bash -c \"CMD ARG ARG\"
        -b CMD [ARG ARG..]  if IGNORE_BASH_COMMAND is 'true', runs this command:
                              bash -c \"CMD ARG ARG\"
                            otherwise, runs the command:
                              bash -c \"PRE_BASH_COMMAND; CMD ARG ARG\"

                            double quotes in the CMD or ARGs are escaped

                            IGNORE_BASH_COMMAND is 'true' or 'false, and
                            can be set in the config file:
                            ignoreBashCommand=IGNORE_BASH_COMMAND
                            {default is 'true'}

                            PRE_BASH_COMMAND can be set in the config file:
                            preBashCommand=PRE_BASH_COMMAND
                            {default is $defaultPreBashCommand}

        -vnc [VNC_ARGS]     call vncCmd
                            e.g.: for n9-vnc: `$0 -vnc rotate90 -- -quality 0`

      CONF:
        either path to an ipmagic conf file, or a word {alphanum+underscore}
        if a word is given, then this file is used:
        \"$confDir/CONF.conf\"
        {available: @confFiles}

      OPTS:
        -v|--verbose        print every little thing that springs to our mouths
        -u|--user USER      ssh user
        -m|--method METHOD  method of obtaining ip
                            one of [$methods]  {default is 'any'}
";

sub main(@){
  if(@_ > 0 and $_[0] =~ /^-/){
    my $cmd = shift;
    if($cmd =~ /^(-h|--help)$/ and @_ == 0){
      print $usage;
    }elsif($cmd =~ /^(--set-hosts)$/ and @_ == 2){
      my ($hostname, $ip) = @_;
      setHostsIP $hostname, $ip;
    }elsif($cmd =~ /^(--remove-hosts)$/ and @_ == 1){
      my ($hostname) = @_;
      setHostsIP $hostname, undef;
    }elsif($cmd =~ /^(--ifup)$/ and @_ == 2){
      my ($dev, $ip) = @_;
      ifup $_[1], $_[2];
    }else{
      die $usage;
    }

    exit 0;
  }

  die $usage if @_ == 0;

  my $conf = shift;
  my $confFile;
  if($conf =~ /^\w+$/){
    $confFile = absolutePath "$confDir/$conf.conf";
  }else{
    $confFile = absolutePath $conf;
  }

  die "Could not read $confFile {$0 -h for usage}\n" if not -f $confFile;
  my %config = %{parseConfig $confFile};

  die "hostname not defined in conf\n" if not defined $config{hostname};

  my %opts;
  while(@_ > 0 and $_[0] =~ /^(-v|--verbose|-u|--user|-m|--method)$/){
    my $arg = shift;
    if($arg =~ /^(-v|--verbose)$/){
      $opts{verbose} = 1;
    }elsif(@_ > 0 and $arg =~ /^(-u|--user)$/){
      $opts{user} = shift;
    }elsif(@_ > 0 and $arg =~ /^(-m|--method)$/){
      $opts{method} = shift;
    }else{
      die $usage;
    }
  }

  $opts{verbose} = 0 if not defined $opts{verbose};
  $opts{user} = $config{defaultUser} if not defined $opts{user};
  $opts{user} = 'root' if not defined $opts{user};
  $opts{method} = 'any' if not defined $opts{method};

  my $ipOnly = 0;

  if(@_ == 1 and $_[0] eq '--host'){
    print "$config{hostname}\n";
    exit 0;
  }elsif(@_ == 1 and $_[0] eq '--ip'){
    $ipOnly = 1;
  }elsif((@_ == 1 or @_ == 2) and $_[0] =~ /^(-t|--tmp)$/){
    my $ip = $_[1] if @_ == 2;
    writeTmpFile $confFile, $ip;
    exit 0;
  }

  my ($isVnc, $isSsh) = (0, 0);
  my $vncCmd;
  my @sshCmd;
  if(@_ > 0 and $_[0] eq '-vnc'){
    $isVnc = shift;
    if(defined $config{vncCommand}){
      $vncCmd = $config{vncCommand};
    }else{
      $vncCmd = "vnc $opts{user}\@$config{hostname}";
    }
    if(@_ > 0){
      $vncCmd .= " @_";
    }elsif(defined $config{vncDefaultArgs}){
      $vncCmd .= " $config{vncDefaultArgs}";
    }
  }elsif(@_ > 0 and $_[0] eq '-s'){
    shift;
    $isSsh = 1;
    @sshCmd = @_;
  }elsif(@_ > 0){
    shift if $_[0] eq '-b';
    $isSsh = 1;
    die "-b missing command\n" if @_ == 0;
    my $c = "@_";
    $c =~ s/"/\\"/g;

    my $preBashCmd = $config{preBashCommand};
    $preBashCmd = $defaultPreBashCommand if not defined $preBashCmd;
    my $ignoreBashCmd = $config{ignorePreBashCommand};
    $ignoreBashCmd = 'false' if not defined $ignoreBashCmd;

    if($ignoreBashCmd !~ /^(true)$/i){
      $c = "bash -c \"$preBashCmd; $c\"";
    }else{
      $c = "bash -c \"$c\"";
    }
    @sshCmd = ($c);
  }

  if(not -x $ifconfigExec){
    $ifconfigExec = `which ifconfig`;
    chomp $ifconfigExec;
  }
  print STDERR "WARNING: no ifconfig exec found\n" if not -x $ifconfigExec;

  if(not -x $iwconfigExec){
    $iwconfigExec = `which iwconfig`;
    chomp $iwconfigExec;
  }
  print STDERR "WARNING: no iwconfig exec found\n" if not -x $iwconfigExec;

  my ($ip, $method);
  if(not defined $ip and $opts{method} =~ /^(any|tmp)$/){
    ($ip, $method) = (readTmpFile($confFile), 'tmp');
  }
  if(not defined $ip and $opts{method} =~ /^(any|usb)$/){
    ($ip, $method) = (usb(\%config, \%opts), 'usb');
  }
  if(not defined $ip and $opts{method} =~ /^(any|wifi)$/){
    ($ip, $method) = (wifi(\%config, \%opts), 'wifi');
  }
  if(not defined $ip and $opts{method} =~ /^(any|guess)$/){
    ($ip, $method) = (guess(\%config, \%opts), 'guess');
  }
  $method = undef if not defined $ip;

  if($ipOnly){
    print "$ip\n" if defined $ip;
    exit (defined $ip ? 0 : 1);
  }

  sudoSetHostsIP $config{hostname}, $ip;

  if(not defined $ip){
    die "ERROR: no IP found\n";
  }

  if($isVnc){
    print "$vncCmd\n" if $opts{verbose};
    exec $vncCmd;
  }elsif($isSsh){
    ensureFingerprint $config{hostname}, $ip if defined $ip;

    my %sshOpts = (
      StrictHostKeyChecking => 'no',
    );
    my @sshCmdOpts = map {("-o", "$_ $sshOpts{$_}")} keys %sshOpts;

    my @cmd = ("ssh", @sshCmdOpts, "$opts{user}\@$config{hostname}", @sshCmd);
    print "@cmd\n" if $opts{verbose};
    exec @cmd;
  }else{
    print "$config{hostname}\n";
  }
}

sub absolutePath($){
  my $relPath = shift;
  $relPath =~ s/"/""/g;
  my $absPath = `readlink -m "$relPath"`;
  chomp $absPath;

  if($absPath =~ /^\s*$/){
    $absPath = `readlink -f "$relPath"`;
    chomp $absPath;
  }

  return $absPath;
}

sub assertBool($){
  my $bool = shift;
  if($bool !~ /^(true|false)$/i){
    die "'$bool' is not 'true' or 'false'\n"
  }
}

sub assertIP($){
  my $ip = shift;
  if($ip !~ /^$ipRegex$/){
    die "'$ip' is not an ip4 address\n"
  }
}

sub assertMac($){
  my $mac = shift;
  if($mac !~ /^$macRegex$/i){
    die "'$mac' is not a mac address\n"
  }
}

sub fingerprint($){
  my $host = shift;
  my $key = `ssh-keygen -l -F $host`;
  if($key =~ /# Host $host found: line \d+ type \w+\n\d+ ([0-9a-f:]+)/s){
    return $1;
  }else{
    return undef;
  }
}

sub ensureFingerprint($$){
  my ($hostname, $ip) = @_;
  my $hnFp = fingerprint $hostname;
  my $ipFp = fingerprint $ip;
  if(defined $ipFp and (not defined $hnFp or $hnFp ne $ipFp)){
    print "WARNING: Fingerprints differ for $hostname and $ip\n";
    print "removing known_hosts entry for $ip\n";
    system "ssh-keygen", "-R", $ip;
  }
}

sub parseConfig($){
  my $file = shift;
  open FH, "< $file" or die "Couldnt open conf $file\n";
  my @lines = <FH>;
  close FH;

  my %mapKeys = map {$_ => 1} qw(macIp ssidIp);
  my %listKeys = map {$_ => 1} qw(mac ipGuess);
  my %singleKeys = map {$_ => 1} qw(
    hostname vncCommand vncDefaultArgs defaultUser
    usbLocalIp usbRemoteIp preBashCommand ignorePreBashCommand
  );
  my %assertBool = map {$_ => 1} qw(ignorePreBashCommand);
  my %assertIp = map {$_ => 1} qw(ipGuess usbLocalIp usbRemoteIp);
  my %assertMac = map {$_ => 1} qw(mac);
  my %assertIpLeft = map {$_ => 1} qw();
  my %assertMacLeft = map {$_ => 1} qw(macIp);
  my %assertIpRight = map {$_ => 1} qw(macIp ssidIp);
  my %assertMacRight = map {$_ => 1} qw();

  my %config;
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    die "Malformed conf: $line\n" if $line !~ /^\s*([a-z]+)\s*=\s*(.+?)\s*$/i;
    my ($key, $val) = ($1, $2);

    if(defined $mapKeys{$key}){
      if($val !~ /^ \s* (\S* | "[^"]*" ) \s* :: \s* (\S* | "[^"]*") \s*$/x){
        die "Malformed map conf entry $key = $val\n";
      }
      my ($valLeft, $valRight) = ($1, $2);
      assertIP $valLeft if defined $assertIpLeft{$key};
      assertMac $valLeft if defined $assertMacLeft{$key};
      assertIP $valRight if defined $assertIpRight{$key};
      assertMac $valRight if defined $assertMacRight{$key};

      $key .= "Map";
      $config{$key} = {} if not defined $config{$key};
      ${$config{$key}}{$valLeft} = $valRight;
    }elsif(defined $listKeys{$key}){
      assertBool $val if defined $assertBool{$key};
      assertIP $val if defined $assertIp{$key};
      assertMac $val if defined $assertMac{$key};
      $key .= "List";
      $config{$key} = [] if not defined $config{$key};
      push @{$config{$key}}, $val;
    }elsif(defined $singleKeys{$key}){
      assertBool $val if defined $assertBool{$key};
      assertIP $val if defined $assertIp{$key};
      assertMac $val if defined $assertMac{$key};
      die "Duplicate single conf entry $key\n" if defined $config{$key};
      $config{$key} = $val;
    }else{
      die "Unknown conf entry: $key\n";
    }
  }

  return \%config;
}

sub hostsMarker($){
  my $hostname = shift;
  return "ipmagic:$hostname";
}

sub readHostsIP($){
  my $hostname = shift;
  my $hostsMarker = hostsMarker $hostname;
  for my $line(`cat /etc/hosts`){
    if($line =~ /^($ipRegex)\s*$hostname\s*#$hostsMarker$/){
      return $1;
    }
  }
  return undef;
}

sub setHostsIP($$){
  my ($hostname, $ip) = @_;
  my $hostsMarker = hostsMarker $hostname;

  my $oldIP = readHostsIP $hostname;
  return if isEqual $oldIP, $ip;

  my $newFmt = defined $ip ? $ip : "[NONE]";
  my $oldFmt = defined $oldIP ? $oldIP : "[NONE]";
  my $action = defined $ip ? "updating" : "deleting";
  print STDERR "$action $hostname in /etc/hosts $oldFmt=>$newFmt\n";

  my @lines = `cat /etc/hosts`;
  for my $line(@lines){
    if($line =~ /^($ipRegex)\s*$hostname\s*#$hostsMarker$/){
      $line = '';
    }
  }
  if(defined $ip){
    if($ip =~ /^$ipRegex$/){
      push @lines, "$ip\t$hostname#$hostsMarker\n";
    }else{
      die "malformed ip: $ip\n";
    }
  }

  open FH, "> /etc/hosts" or die "Couldnt open /etc/hosts for writing\n";
  print FH @lines;
  close FH;
}
sub sudoSetHostsIP($$){
  my ($hostname, $ip) = @_;

  my $oldIP = readHostsIP $hostname;
  return if isEqual $oldIP, $ip;

  if(defined $ip){
    system "sudo", $0, "--set-hosts", $hostname, $ip;
  }else{
    system "sudo", $0, "--remove-hosts", $hostname;
  }
}

sub getTmpFile($){
  my $confFile = shift;
  my $tmpFile = $confFile;
  $tmpFile =~ tr/\//_/;
  $tmpFile = "/tmp/ipmagic$tmpFile.tmp";
  return $tmpFile;
}
sub readTmpFile($){
  my $confFile = shift;
  my $tmpFile = getTmpFile $confFile;
  if(not -e $tmpFile){
    return undef;
  }else{
    open FH, "< $tmpFile" or die "Couldnt read $tmpFile\n";
    my $val = join '', <FH>;
    close FH;
    chomp $val;
    return $val;
  }
}
sub writeTmpFile($$){
  my $confFile = shift;
  my $val = shift;
  my $tmpFile = getTmpFile $confFile;
  if(not defined $val){
    if(-e $tmpFile){
      system "rm", $tmpFile;
      die "Couldnt remove $tmpFile\n" if $? != 0;
    }
  }else{
    open FH, "> $tmpFile" or die "Couldnt write to $tmpFile\n";
    print FH "$val\n";
    close FH;
  }
}

sub quickPingable($){
  system "ping $_[0] -c 1 -w 1 >/dev/null 2>/dev/null";
  return $? == 0;
}

sub ifup($$){
  my ($dev, $ip) = @_;
  system "$ifconfigExec"
    . " $dev $ip netmask 255.255.255.0 up"
    . " > /dev/null"
    ;
}
sub sudoIfup($$){
  my ($dev, $ip) = @_;
  system "sudo", $0, "--ifup", $dev, $ip;
}

sub getDefaultGatewayMac(){
  my $route = `route -n`;
  if($route =~ /^0\.0\.0\.0\s*($ipRegex)/m){
    my $ip = $1;
    my $arp = `arp -n $ip`;
    if($arp =~ /^$ip\s*[a-zA-Z0-9_]+\s*($macRegex)/m){
      return $1;
    }
  }
  return undef;
}

sub usb($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  if(not defined $config{usbLocalIp} or not defined $config{usbRemoteIp}){
    return undef;
  }
  print "Trying usb\n" if $opts{verbose};
  my $localIp = $config{usbLocalIp};
  my $remoteIp = $config{usbRemoteIp};

  my $ifconfig = `$ifconfigExec -a`;
  my @macs;
  if(defined $config{macList}){
    @macs = @{$config{macList}};
  }
  foreach my $mac(@macs){
    if($ifconfig =~ /^(\w+)([^\n]+\n?)*(HWaddr|ether) $mac/mi){
      my $dev = $1;
      print "mac $mac => device $dev\n" if $opts{verbose};
      $ifconfig = `$ifconfigExec $dev`;
      if($ifconfig !~ /inet (addr:)?$localIp/){
        print STDERR "USB DEVICE UP\n";
        sudoIfup $dev, $localIp;
      }
      print "  success!\n" if $opts{verbose};
      return $remoteIp;
    }
  }
  return undef;
}

sub wifi($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  if(not defined $config{macIpMap} and not defined $config{ssidIpMap}){
    return undef;
  }

  my %macIpMap = %{$config{macIpMap}} if defined $config{macIpMap};
  my %ssidIpMap = %{$config{ssidIpMap}} if defined $config{ssidIpMap};

  my $iwconfig = `$iwconfigExec 2>/dev/null`;
  my $mac = lc ($iwconfig =~ /Access Point: ([a-z0-9:]+)/i ? $1 : '<none>');
  my $ssid = lc ($iwconfig =~ /ESSID:"(.*)"/ ? $1 : '<none>');
  print "Trying wifi  {mac: $mac   ssid: $ssid}\n" if $opts{verbose};

  if($mac eq '<none>'){
    my $gwMac = getDefaultGatewayMac();
    $mac = lc $gwMac if defined $gwMac;
  }

  my $macIp;
  for my $macConfig(keys %macIpMap){
    $macIp = $macIpMap{$macConfig} if lc $macConfig eq lc $mac;
  }
  my $ssidIp = $ssidIpMap{$ssid};

  if(defined $macIp){
    print "  chose IP $macIp by mac\n" if $opts{verbose};
    print "  success!\n" if $opts{verbose};
    return $macIp;
  }elsif(defined $ssidIp){
    print "  chose IP $ssidIp by ssid\n" if $opts{verbose};
    print "  success!\n" if $opts{verbose};
    return $ssidIp;
  }

  return undef;
}

sub guess($$){
  my %config = %{shift()};
  my %opts = %{shift()};
  my $hostname = $config{hostname};
  if(defined $config{ipGuessList}){
    print "Trying guesses\n" if $opts{verbose};
    for my $ip(@{$config{ipGuessList}}){
      print "  guess $ip\n" if $opts{verbose};
      if(quickPingable $ip){
        print "  success!\n" if $opts{verbose};
        return $ip;
      }
    }
  }

  my $oldIP = readHostsIP $config{hostname};
  if(defined $oldIP){
    print "  guess $oldIP (old hosts IP)\n" if $opts{verbose};
    if(quickPingable $oldIP){
      print "  success!\n" if $opts{verbose};
      return $oldIP;
    }
  }

  return undef;
}

sub isEqual($$){
  if(not defined $_[0] and not defined $_[1]){
    return 1;
  }elsif(not defined $_[0] or not defined $_[1]){
    return 0;
  }else{
    return $_[0] eq $_[1] ? 1 : 0;
  }
}

&main(@ARGV);
