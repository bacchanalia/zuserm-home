#!/usr/bin/perl
use strict;
use warnings;

my $ssDir = "$ENV{HOME}/install/bin";
my $compiledDir = "$ENV{HOME}/.cache/ss-compiled";
my $perl = "/usr/bin/perl";
my $cpanm = "/usr/bin/cpanm";

sub getScript($);
sub getExec($);
sub getCFile($);
sub checkCompiled($);
sub compileScript($);
sub compile($$$);
sub generateC($$);
sub generateExec($$);
sub ensureCompile();
sub testCompile();
sub mtime($);
sub rmFiles(@);

my $dir = "$ENV{HOME}/install/bin";
my $module = "$dir/ScriptScript.pm";

my $usage = "Usage:
  $0 SCRIPT_NAME ARGS
    run '$ssDir/SCRIPT_NAME ARGS'
      or '$compiledDir/SCRIPT_NAME.run ARGS'

  $0 --compile SCRIPT_NAME
    ensure that '$compiledDir/SCRIPT_NAME.run' is up-to-date,
    compiling it if it is not
    {checks mtime against '$ssDir/SCRIPT_NAME'}

  $0 --recompile SCRIPT_NAME
    compile '$compiledDir/SCRIPT_NAME.run'
";

sub main(@){
  if(@_ == 2 and $_[0] =~ /^(--compile)$/){
    my $scriptName = $_[1];
    if(not checkCompiled $scriptName){
      ensureCompile();
      compileScript $scriptName;
    }
  }elsif(@_ == 2 and $_[0] =~ /^(--recompile)$/){
    my $scriptName = $_[1];
    compileScript $scriptName;
  }elsif(@_ > 0){
    my $scriptName = shift;
    my @args = @_;

    if(checkCompiled $scriptName){
      exec getExec($scriptName), @args;
    }else{
      exec getScript($scriptName), @args;
    }
  }else{
    die $usage;
  }
}

sub getScript($){
  return "$ssDir/$_[0]";
}
sub getExec($){
  return "$compiledDir/$_[0].run";
}
sub getCFile($){
  return "$compiledDir/$_[0].c";
}

sub checkCompiled($){
  my $scriptName = shift;
  my $script = getScript $scriptName;
  my $cFile = getCFile $scriptName;
  my $exec = getExec $scriptName;
  if(-e $exec and mtime($script) == mtime($exec)){
    return 1;
  }else{
    rmFiles $cFile, $exec;
  }
}

sub compileScript($){
  my $scriptName = shift;
  return compile(
    getScript $scriptName,
    getCFile $scriptName,
    getExec $scriptName,
  );
}
sub compile($$$){
  my ($script, $cFile, $exec) = @_;
  system "mkdir", "-p", $compiledDir;

  print STDERR "Generating C $script => $cFile\n";
  if(!generateC($script, $cFile)){
    print STDERR "failed to generate c for $script\n";
    return 0;
  }
  print STDERR "Compiling C $cFile => $exec\n";
  if(!generateExec($cFile, $exec)){
    print STDERR "failed to compile $cFile\n";
    return 0;
  }

  system "touch", $cFile, "-r", $script;
  system "touch", $exec, "-r", $script;
  return 1;
}
sub generateC($$){
  my ($script, $cFile) = @_;

  rmFiles $cFile;
  my $cmd = "$perl -MO=C,-o\"$cFile\" \"$script\"";
  my $output = `$cmd 2>&1`;

  return 0 if $output =~ /B::C|B\/C\.pm/ or not -f $cFile;
  return 1;
}
sub generateExec($$){
  my ($cFile, $exec) = @_;
  rmFiles $exec;
  my $cmd = "cc_harness -O2 -o \"$exec\" \"$cFile\"";
  my $output = `$cmd 2>&1`;
  return 0 if $? != 0 or not -f $exec;
  return 1;
}

sub ensureCompile(){
  return 1 if testCompile();
  return 0 if not -x $cpanm;
  system "sudo", "cpanm", "install", "--notest", "B::C";
  return 1 if testCompile();
}

sub testCompile(){
  my $testScript = "/tmp/test-perl-b-c.pl";
  my $testCFile = "/tmp/test-perl-b-c.c";
  my $testExec = "/tmp/test-perl-b-c";

  rmFiles $testScript, $testCFile, $testExec;

  my $msg = "hello world";

  open FH, "> $testScript" or die "Couldnt write to $testScript\n";
  print FH "print '$msg'\n";
  close FH;

  if(!compile $testScript, $testCFile, $testExec){
    return 0;
  }

  my $res = `$testExec`;
  return 0 if $res !~ /^hello world$/;

  rmFiles $testScript, $testCFile, $testExec;
  return 1;
}

sub mtime($){
  my $file = shift;
  return undef if not -e $file;
  return (stat($file))[9];
}

sub rmFiles(@){
  for my $file(@_){
    system "rm", $file if -f $file;
    die "Could not remove $file\n" if -e $file;
  }
}

&main(@ARGV);
