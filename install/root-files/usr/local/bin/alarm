#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long qw(GetOptionsFromArray :config bundling);
use Cwd 'abs_path';

sub listFiles($);
sub pulseExec(@);

my $alarmsDir = '/usr/share/alarms';
die "$alarmsDir/ doesnt exist or isnt a dir\n" if not -d $alarmsDir;
my $validAlarms = join '|', listFiles $alarmsDir;
die "$alarmsDir is empty\n" if $validAlarms eq '';

my $usage = "Usage:
  $0 [OPTS] [ALARM_NAME]
    Runs 'term mplayer $alarmsDir/ALARM_NAME -loop 0'.
    If run as root, reruns as the user running pulseaudio.

    ALARM_NAME:
      File name under $alarmsDir
      Optional; default is 'default'
      Valid values: $validAlarms

    OPTS:
      -h|--help       Show this message
      -n|--norerun    Do not rerun as pulse user
      -o|--once       Do not repeat alarm {don't pass '-loop 0' to mplayer}
      -g|--guess      If alarm does not match, use 'default' instead of failing
      -v N|--vol=N    Attempt to unmute and set volume to N % using pulse-vol
      -b|--background Run in background and do not use term
";


sub main(@){
  my ($help, $norerun, $once, $guess, $vol, $background);
  my $ok = GetOptionsFromArray(\@_,
    "h|help"       => \$help,
    "n|norerun"    => \$norerun,
    "o|once"       => \$once,
    "g|guess"      => \$guess,
    "v|vol=i"      => \$vol,
    "b|background" => \$background,
  );

  my $defaultFile = "$alarmsDir/default";

  my $name = shift() || 'default';
  my $file;
  if($name =~ /^($validAlarms)$/){
    $file = "$alarmsDir/$name";
  }elsif(defined $guess and -e $defaultFile){
    print "Could not find '$name'; using '$defaultFile'\n";
    $file = $defaultFile;
  }

  die $usage if not $ok or @_ > 0
    or defined $help
    or not defined $file
    or (defined $vol and $vol < 0)
    ;

  pulseExec $0, @ARGV unless defined $norerun;

  $file = abs_path $file if -l $file;
  die "Missing alarm file $file\n" if not -f $file;

  if(defined $vol){
    system "pulse-vol", "unmute";
    system "pulse-vol", $vol;
  }

  my @cmd;
  @cmd = (@cmd, "term") unless $background;
  @cmd = (@cmd, "mplayer", $file);
  @cmd = (@cmd, "-loop", "0") unless $once;

  if(not $background){
    exec @cmd;
  }else{
    if(not fork){
      close STDOUT;
      close STDERR;
      exec @cmd;
    }
  }
}

sub listFiles($){
  return sort map {chomp; $_} `ls $_[0]/`;
}

sub pulseExec(@){
  my $user = `whoami`;
  chomp $user;
  my $pulseUser = `ps --no-heading -o user -C pulseaudio | head -1`;
  chomp $pulseUser;

  if($user eq 'root' and $pulseUser ne 'root' and length($pulseUser) > 0){
    print "rerunning as pulse user $pulseUser\n";
    exec "su", $pulseUser, "-c", "@_";
  }
}

&main(@ARGV);
