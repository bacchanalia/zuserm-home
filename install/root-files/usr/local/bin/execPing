#!/usr/bin/perl
use strict;
use warnings;

sub attemptPing($$);

my $defaultDeadline = 1;
my $defaultDelay = 1;
my $defaultTimeout = 0;

my $usage = "Usage:
  $0 [OPTS] URL EXEC [ARG ARG ..]
    Ensure that URL is ping-able before running \"EXEC ARG ARG ..\"

  OPTS:
    --deadline=INTEGER     {default is $defaultDeadline}
      seconds to wait for a response for each ping

    --delay=INTEGER        {default is $defaultDelay}
      seconds to wait between failed pings

    --timeout=INTEGER  {default is $defaultTimeout}
      seconds to wait before failing, 0 means forever
";

sub main(@){
  my ($deadline, $delay, $timeout) =
    ($defaultDeadline, $defaultDelay, $defaultTimeout);
  while(@_ > 0 and $_[0] =~ /^-/){
    my $opt = shift;
    if($opt =~ /^--deadline=(\d+)$/){
      $deadline = $1;
    }elsif($opt =~ /^--delay=(\d+)$/){
      $delay = $1;
    }elsif($opt =~ /^--timeout=(\d+)$/){
      $timeout = $1;
    }else{
      die $usage;
    }
  }

  my $url = shift;
  my $exec = shift;
  my @args = @_;

  die $usage if not defined $url or not defined $exec;

  my $start = time;
  while(not attemptPing $url, $deadline){
    if($timeout > 0 and time - $start > $timeout){
      die "timeout reached, exiting\n";
    }
    print STDERR "ping failed, retrying...\n";
    sleep $delay;
  }

  exec $exec, @args;
}

sub attemptPing($$){
  my ($url, $deadline) = @_;
  $url =~ s/'/'\\''/g;
  system "ping -c 1 -w $deadline '$url' >/dev/null 2>/dev/null";
  return $? == 0;
}

&main(@ARGV);
