#!/usr/bin/perl
use strict;
use warnings;

my $repo = 'git://git.tuxfamily.org/gitroot/fcron/fcron.git';
my $commit = 'ver3_1_2';
my $tab = "/etc/fcrontab";
my $sourceTab = "$ENV{HOME}/.fcrontab";

my $fcron_pam;
my $fcrontab_pam;
my $patch;

sub pam($$){
  my $file = shift;
  $file = "/etc/pam.d/$file";
  my $content = shift;
  open FH, "| sudo tee $file" or (print STDERR "Couldnt write $file");
  print FH $content;
  close FH;
}

sub run(@){
  print "@_\n";
  system @_;
}

sub main(){
  run "sudo", "apt-get", "install", qw(
    adduser debconf dpkg exim4 libc6
    libpam-runtime libpam0g libpam0g-dev libselinux1 libselinux1-dev
    libreadline-dev  libaudit-dev
    autoconf

    docbook docbook-xsl docbook-xml docbook-utils manpages-dev
  );
  run "sudo", "apt-get", "remove", "--purge", "anacron";

  print "\n\n\n\n\n\n";

  my $installDir = "/tmp/fcron";
  if(-e $installDir){
    chdir $installDir;
    run "git", "checkout", $commit;
    if($? != 0){
      run "rm", "-rf", $installDir;
    }
  }

  if(not -e $installDir){
    run "mkdir", $installDir;
    chdir $installDir;
    run "git", "clone", $repo, ".";
    run "git", "checkout", $commit;
    if($? != 0){
      die "Couldnt get repo $repo setup\n";
    }
  }

  print "\n\n\n\n\n\n";

  open FH, "|-", "git", "apply", "-";
  print FH $patch;
  close FH;

  print "\n\n\n\n\n\n";

  run "autoconf";
  run "./configure";
  run "sudo", "make", "install";
  pam 'fcron', $fcron_pam;
  pam 'fcrontab', $fcrontab_pam;

  print "\n\n\n\n\n\n";

  run "sudo", "rm", $tab;
  run "sudo", "ln", "-s", $sourceTab, $tab;

  run "sudo", "fcron";
  run "fcronreset 2>/dev/null";
  print "done\n";
}

$fcron_pam =
'#
# The PAM configuration file for fcron daemon
#

# Warning: fcron has no way to prompt user for a password, so don\'t!
auth       required   pam_env.so
auth       required   pam_permit.so

@include common-account

@include common-session
# Sets up user limits, please define limits for cron tasks
# through /etc/security/limits.conf
session    required   pam_limits.so
#
#session   required   pam_permit.so
';

$fcrontab_pam =
'#
# The PAM configuration file for fcrontab
#

# WARNING : you cannot use every modules here, as some
#           (such as pam_unix_acct.so) require the program to be run
#           by root or suid root, and fcrontab is *not* suid root.

# By default we do not ask user for a password
# (but fcrontab can do it, if you configure it to do so)
auth		sufficient	pam_permit.so
@include common-auth

# pam_unix.so seems to get very cross if you use it to do account
# management but didn\'t use it for auth.  Can\'t people write PAM
# modules right, for once?
#@include common-account
account		required	pam_permit.so
#account	required	pam_time.so

@include common-session
#session	required	pam_permit.so
';

$patch = '
diff --git a/config.h.in b/config.h.in
index 309517d..e3a3de3 100644
--- a/config.h.in
+++ b/config.h.in
@@ -33,7 +33,7 @@
 /* beginning of configurable stuff ********************************** */
 
 
-#define DEFAULT_JOB_PATH "/usr/bin:/bin" /* Default PATH to use when running jobs*/
+#define DEFAULT_JOB_PATH "/bin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin" /* Default PATH to use when running jobs*/
 
 #define SENDMAIL_ARGS	 "-Ffcron", "-odi"   /* args of mail command */
 
diff --git a/fcrontab.c b/fcrontab.c
index 8f68462..6ac2a94 100644
--- a/fcrontab.c
+++ b/fcrontab.c
@@ -176,9 +176,9 @@ xexit(int exit_val)
 #ifdef HAVE_LIBPAM
     /* we need those rights for pam to close properly */
     if (geteuid() != fcrontab_uid && seteuid(fcrontab_uid) != 0)
-        die_e("could not change euid to %d", fcrontab_uid);
+        error_e("could not change euid to %d", fcrontab_uid);
     if (getegid() != fcrontab_gid && setegid(fcrontab_gid) != 0)
-        die_e("could not change egid to %d", fcrontab_gid);
+        error_e("could not change egid to %d", fcrontab_gid);
     pam_setcred(pamh, PAM_DELETE_CRED | PAM_SILENT);
     pam_end(pamh, pam_close_session(pamh, PAM_SILENT));
 #endif
diff --git a/socket.c b/socket.c
index e52c957..01f3b9f 100644
--- a/socket.c
+++ b/socket.c
@@ -476,9 +476,9 @@ print_line(int fd, struct cl_t *line, unsigned char *details, pid_t pid,
             ftime = localtime(&until);
             len +=
                 snprintf(buf + len, sizeof(buf) - len,
-                         " %02d/%02d/%d %02d:%02d %s", (ftime->tm_mon + 1),
+                         " %02d/%02d/%d %02d:%02d:%02d %s", (ftime->tm_mon + 1),
                          ftime->tm_mday, (ftime->tm_year + 1900),
-                         ftime->tm_hour, ftime->tm_min,
+                         ftime->tm_hour, ftime->tm_min, ftime->tm_sec,
                          (is_strict(line->cl_option)) ? "Y" : "N");
         }
         else
@@ -488,9 +488,9 @@ print_line(int fd, struct cl_t *line, unsigned char *details, pid_t pid,
     }
     if (bit_test(details, FIELD_SCHEDULE)) {
         ftime = localtime(&(line->cl_nextexe));
-        len += snprintf(buf + len, sizeof(buf) - len, " %02d/%02d/%d %02d:%02d",
+        len += snprintf(buf + len, sizeof(buf) - len, " %02d/%02d/%d %02d:%02d:%02d",
                         (ftime->tm_mon + 1), ftime->tm_mday,
-                        (ftime->tm_year + 1900), ftime->tm_hour, ftime->tm_min);
+                        (ftime->tm_year + 1900), ftime->tm_hour, ftime->tm_min, ftime->tm_sec );
     }
     len += snprintf(buf + len, sizeof(buf) - len, " %s\n", line->cl_shell);
 
diff --git a/subs.c b/subs.c
index 5a04a21..8704469 100644
--- a/subs.c
+++ b/subs.c
@@ -68,7 +68,7 @@ seteuid_safe(uid_t euid)
      * which is why we need to check if a change is needed */
 
     if (geteuid() != euid && seteuid(euid) != 0)
-        die_e("could not change euid to %d", euid);
+        error_e("could not change euid to %d", euid);
 
 }
 
@@ -81,7 +81,7 @@ setegid_safe(gid_t egid)
      * which is why we need to check if a change is needed */
 
     if (getegid() != egid && setegid(egid) != 0)
-        die_e("could not change egid to %d", egid);
+        error_e("could not change egid to %d", egid);
 
 }
 #endif                          /* def USE_SETE_ID */
';

&main;
