#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

my $dir = '/etc/bash_completion.d';

sub getFctImpls();

sub main(@) {
  getRoot @_;

  my $files = {
    'ssrun' => complete("_ssrun", qw(ssrun)),
    'backup' => complete("_backup", qw(backup)),
    'alarm' => complete("_alarm", qw(alarm)),
    'sudo-aliases' => complete("_root_command", qw(suod sudp)),
    'spawn' => complete("_root_command", qw(spawn spawnex s sx spawnexsudo)),
    'mnt' => complete("_mntnames", qw(mnt mnto)),
    'update-repo' => complete("_repo_lists", qw(update-repo)),
    'bgset' => complete("_bgset", qw(bgset)),
    'xmonad-bindings' => complete("_xmonad_bindings", qw(xmonad-bindings xmb)),
    'cloud' => complete("_cloud", qw(cloud)),
    'completion-aliases' => completionAliases(
       'evince' => [qw(evi)],
       'git'    => [qw(g)],
       'mkdir'  => [qw(mkdit)],
       'vim'    => [qw(bim cim)],
       ),
  };

  for my $file(keys %$files){
    writeFile "$dir/$file", $$files{$file};
  }
}

sub complete($@){
  my ($fct, @cmds) = @_;
  my $fctImpls = getFctImpls;
  my $complete = '';
  $complete .= "$fct()$$fctImpls{$fct}\n" if defined $$fctImpls{$fct};
  $complete .= "complete -F $fct @cmds\n";
  print "  completing $fct => @cmds\n";
  return $complete;
}

sub getFctImpls(){
  return {
    "_ssrun" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      scriptNames="$(ssrun runsub getScriptNames 2>/dev/null)"
      subNames="$(ssrun runsub getSubNames 2>/dev/null)"
      installNames="$(ssrun runsub getInstallNames 2>/dev/null)"

      if [ ${#COMP_WORDS[@]} == 2 ]; then
        COMPREPLY=( $(compgen -W "$scriptNames" -- $cur) )
      elif [ ${#COMP_WORDS[@]} == 3 ] && [ "${COMP_WORDS[1]}" == "runsub" ]; then
        COMPREPLY=( $(compgen -W "$subNames" -- $cur) )
      elif [ ${#COMP_WORDS[@]} == 3 ] && [ "${COMP_WORDS[1]}" == "install" ]; then
        COMPREPLY=( $(compgen -W "$installNames" -- $cur) )
      else
        COMPREPLY=()
      fi
    }',

    "_backup" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      words=$( backup --bash-complete "$COMP_LINE" "$COMP_POINT" )

      COMPREPLY=( $(compgen -W "$words" -- $cur) )
    }',

    "_alarm" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      words=$( alarm --bash-complete "$COMP_LINE" "$COMP_POINT" )

      COMPREPLY=( $(compgen -W "$words" -- $cur) )
    }',

    "_mntnames" => '{
      local cur names
      cur="${COMP_WORDS[COMP_CWORD]}"
      mntexe=$1
      opts="-m -u -g -n -l --usb --no-usb --card --no-card --other --no-other"

      if [ ${#COMP_WORDS[@]} == 3 ]; then
        names=`$mntexe -n`
        COMPREPLY=( $(compgen -W "$names" -- $cur) )
      elif [ ${#COMP_WORDS[@]} == 2 ]; then
        COMPREPLY=( $(compgen -W "$opts" -- $cur) )
      else
        COMPREPLY=()
      fi
    }',

    "_repo_lists" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"

      COMPREPLY=($(
        find /etc/apt/sources.list.d/ \
          -iname "*$cur*.list" \
          -exec basename {} \; \
          2> /dev/null \
        | sort \
      ))
      return 0
    }',

    "_bgset" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      words=$( bgset --bash-complete "$COMP_LINE" "$COMP_POINT" )

      COMPREPLY=( $(compgen -W "$words" -- $cur) )
    }',

    "_bgset" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      words=$( bgset --bash-complete "$COMP_LINE" "$COMP_POINT" )

      COMPREPLY=( $(compgen -W "$words" -- $cur) )
    }',

    "_xmonad_bindings" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      words=$( xmonad-bindings --bash-complete "$COMP_LINE" "$COMP_POINT" )

      COMPREPLY=( $(compgen -W "$words" -- $cur) )
    }',

    "_cloud" => '{
      local cur
      cur="${COMP_WORDS[COMP_CWORD]}"
      words=$( cloud --bash-complete "$COMP_LINE" "$COMP_POINT" )

      COMPREPLY=( $(compgen -W "$words" -- $cur) )
    }',
  };
}

sub completionAliases(%){
  my %aliases = @_;

  print join "\n",
    "  completing _completion_aliases => {",
    (map { my $realcmd = $_;
    "    @{$aliases{$realcmd}} => $realcmd,"
    } sort keys %aliases),
    "  }",
    "";

  return join "\n",
    'declare -A _completion_alias_map',
    '_completion_alias_map=(',
    (map { my $realcmd = $_; map { my $cmd = $_;
    "  [\"$cmd\"]=\"$realcmd\""
    } sort @{$aliases{$realcmd}} } sort keys %aliases),
    '  )',
    '',
    'function _completion_aliases {',
    '  local cmd=${COMP_WORDS[0]}',
    '  local realcmd=${_completion_alias_map[$cmd]}',
    '',
    '  COMP_LINE="$realcmd $(echo "$COMP_LINE" | cut -d" " -f2-)"',
    '  COMP_WORDS[0]="$realcmd"',
    '  ((COMP_POINT+=${#realcmd}-${#cmd}))',
    '  _command_offset 0',
    '}',
    '',
    'complete -F _completion_aliases ${!_completion_alias_map[@]}',
    '';
}

&main(@ARGV);
