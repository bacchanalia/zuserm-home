6,8d5
< import com.backup42.common.User;
< import com.backup42.common.config.CentralConfig;
< import com.backup42.common.config.OrgTypeConfigItem;
10,11d6
< import com.backup42.common.config.ServicePeerConfig;
< import com.backup42.common.config.ServiceUIConfig;
13,14d7
< import com.backup42.desktop.actions.ShowMainWindow;
< import com.backup42.desktop.controllers.MainWindowController;
17d9
< import com.backup42.desktop.interfaces.IModelObserver;
23d14
< import com.backup42.desktop.model.LicenseModel;
25,27d15
< import com.backup42.desktop.model.UserListModel;
< import com.backup42.desktop.model.UserModel;
< import com.backup42.desktop.utils.CPFont;
30,34d17
< import com.backup42.desktop.view.MainWindow.Event.AppActivatedEvent;
< import com.backup42.desktop.view.MainWindow.Event.AppCloseEvent;
< import com.backup42.desktop.view.MainWindow.Event.AppDeactivatedEvent;
< import com.backup42.desktop.view.MainWindow.Event.AppShowEvent;
< import com.backup42.desktop.view.MainWindow.Event.Listener;
43d25
< import com.code42.config.ConfigItem;
45,47d26
< import com.code42.event.IListener;
< import com.code42.event.Listener;
< import com.code42.event.Publisher;
56a36
> import com.code42.messaging.MessageReceiverProxy;
58d37
< import com.code42.os.mac.io.FileManager.FSCatalogInfo;
65,66d43
< import com.code42.swt.util.ActionManager;
< import com.code42.swt.util.SWTExec;
68c45
< import com.code42.swt.view.AppWindowEvent.WindowReadyEvent;
---
> import com.code42.swt.view.AppWindowEvent;
78a56
> 
82a61
> 
85,86d63
< import org.eclipse.swt.widgets.Display;
< import org.eclipse.swt.widgets.Shell;
88,92c65,66
< public class CPDesktop
<   extends Publisher
<   implements SplashWindow.Event.Listener, MainWindow.Event.Listener, IModelObserver
< {
<   private static final com.code42.logging.Logger log = LoggerFactory.getLogger(CPDesktop.class.getName());
---
> public class CliWrapper {
>   private static final com.code42.logging.Logger log = LoggerFactory.getLogger(CliWrapper.class.getName());
94d67
<   private static Display display;
96d68
<   private final Listener listener = new Listener(this);
113c85
<         SystemOut.info(CPDesktop.class, "init", "No JVM temp directory configured!");
---
>         SystemOut.info(CliWrapper.class, "init", "No JVM temp directory configured!");
119c91
<         SystemOut.info(CPDesktop.class, "init", "JVM temp directory " + tmpdirname + " does not exist!");
---
>         SystemOut.info(CliWrapper.class, "init", "JVM temp directory " + tmpdirname + " does not exist!");
124c96
<         SystemOut.info(CPDesktop.class, "init", "JVM temp directory " + tmpdirname + " is not a directory!");
---
>         SystemOut.info(CliWrapper.class, "init", "JVM temp directory " + tmpdirname + " is not a directory!");
129c101
<         SystemOut.info(CPDesktop.class, "init", "JVM temp directory " + tmpdirname + " exists but we can't write to it!");
---
>         SystemOut.info(CliWrapper.class, "init", "JVM temp directory " + tmpdirname + " exists but we can't write to it!");
140,150c112,122
<       SystemOut.info(CPDesktop.class, "init", "*************************************************************");
<       SystemOut.info(CPDesktop.class, "init", "*************************************************************");
<       SystemOut.info(CPDesktop.class, "init", "STARTED " + getAppBaseName() + "Desktop");
<       SystemOut.info(CPDesktop.class, "init", "CPVERSION = " + CPVersion.asString());
<       SystemOut.info(CPDesktop.class, "init", "ARGS      = " + ArrayUtils.toString(args));
<       SystemOut.info(CPDesktop.class, "init", "LOCALE    = " + Locale.getDefault().getDisplayName(Locale.ENGLISH));
<       SystemOut.info(CPDesktop.class, "init", "JVM       = " + jvm);
<       SystemOut.info(CPDesktop.class, "init", "OS        = " + os);
<       SystemOut.info(CPDesktop.class, "init", "User      = " + user);
<       SystemOut.info(CPDesktop.class, "init", "swt.library.path = " + System.getProperty("swt.library.path"));
<       SystemOut.info(CPDesktop.class, "init", "*************************************************************");
---
>       SystemOut.info(CliWrapper.class, "init", "*************************************************************");
>       SystemOut.info(CliWrapper.class, "init", "*************************************************************");
>       SystemOut.info(CliWrapper.class, "init", "STARTED " + getAppBaseName() + "Desktop");
>       SystemOut.info(CliWrapper.class, "init", "CPVERSION = " + CPVersion.asString());
>       SystemOut.info(CliWrapper.class, "init", "ARGS      = " + ArrayUtils.toString(args));
>       SystemOut.info(CliWrapper.class, "init", "LOCALE    = " + Locale.getDefault().getDisplayName(Locale.ENGLISH));
>       SystemOut.info(CliWrapper.class, "init", "JVM       = " + jvm);
>       SystemOut.info(CliWrapper.class, "init", "OS        = " + os);
>       SystemOut.info(CliWrapper.class, "init", "User      = " + user);
>       SystemOut.info(CliWrapper.class, "init", "swt.library.path = " + System.getProperty("swt.library.path"));
>       SystemOut.info(CliWrapper.class, "init", "*************************************************************");
159c131
<               SystemOut.info(CPDesktop.class, "init", "SWT library deleted: " + swtFile);
---
>               SystemOut.info(CliWrapper.class, "init", "SWT library deleted: " + swtFile);
168c140
<           SystemOut.info(CPDesktop.class, "init", "SWT library dir created: " + swtDir);
---
>           SystemOut.info(CliWrapper.class, "init", "SWT library dir created: " + swtDir);
172c144
<       AppTimer.begin(CPDesktop.class.getSimpleName());
---
>       AppTimer.begin(CliWrapper.class.getSimpleName());
176c148
<       CPDesktop startupController = new CPDesktop(args);
---
>       CliWrapper startupController = new CliWrapper(args);
181c153
<       String msg = "Failed to launch " + CPDesktop.class.getSimpleName() + "; " + e;
---
>       String msg = "Failed to launch " + CliWrapper.class.getSimpleName() + "; " + e;
183c155
<       SystemOut.log(Level.ERROR, CPDesktop.class, "init", msg);
---
>       SystemOut.log(Level.ERROR, CliWrapper.class, "init", msg);
185a158,166
> 
>     Thread.sleep(1000);
>     System.out.println("\n\n");
>     for(String arg : args){
>         Services.getInstance().sendCommand(arg, new MessageReceiverProxy());
>     }
>     System.out.println("\n\n");
>     Thread.sleep(1000);
>     Runtime.getRuntime().halt(0);
190,192c171
<     SystemOut.info(CPDesktop.class, "secondaryMain", "Bring main window forward.");
<     Display disp = MainWindow.getInstance().getShell().getDisplay();
<     ActionManager.run(disp, new ShowMainWindow());
---
>     SystemOut.info(CliWrapper.class, "secondaryMain", "Bring main window forward.");
195c174
<   public CPDesktop(String[] args)
---
>   public CliWrapper(String[] args)
208a188,189
>     appModel = new AppModel(commandLineArguments);
> 
216d196
<     Display.setAppName(appName);
231c211
<         OrgType orgType = orgType.get();
---
>         OrgType orgType = OrgType.CONSUMER;
248,249d227
<     appModel = new AppModel(commandLineArguments);
<     appModel.getConfigModel().addObserver(this);
294,297d271
<     display = Display.getDefault();
<     
<     CPFont.loadFonts(display, appModel.getDesktopProperties());
<     
315c289
<     SystemOut.info(CPDesktop.class, "waitForCustom", "Waiting for custom indicator to appear in " + customMark);
---
>     SystemOut.info(CliWrapper.class, "waitForCustom", "Waiting for custom indicator to appear in " + customMark);
323c297
<       SystemOut.info(CPDesktop.class, "waitForCustom", "Waited " + Formatter.getDurationString(sw.getElapsed()) + " for custom indicator to appear in " + customMark + ", exists=" + customMark.exists());
---
>       SystemOut.info(CliWrapper.class, "waitForCustom", "Waited " + Formatter.getDurationString(sw.getElapsed()) + " for custom indicator to appear in " + customMark + ", exists=" + customMark.exists());
327c301
<       SystemOut.info(CPDesktop.class, "waitForCustom", "InterruptedException while waiting for custom indicator to appear in " + customMark);
---
>       SystemOut.info(CliWrapper.class, "waitForCustom", "InterruptedException while waiting for custom indicator to appear in " + customMark);
371,380d344
<     try
<     {
<       splashWindow = new SplashWindow(display);
<       splashWindow.addListeners(new IListener[] { listener });
<       splashWindow.open();
<     }
<     catch (Throwable e)
<     {
<       log.warn("Unable to show splash. " + e.getMessage(), new Object[] { e });
<     }
386,389d349
<     services.addListener(listener, ConnectedEvent.class);
<     services.addListener(listener, ConnectFailedEvent.class);
<     services.addListener(listener, StatusResponseMessage.class);
<     
403c363
<           CPDesktop.log.info("EXITING... Normally");
---
>           CliWrapper.log.info("EXITING... Normally");
408c368
<           synchronized (CPDesktop.MAIN_MONITOR)
---
>           synchronized (CliWrapper.MAIN_MONITOR)
411c371
<             CPDesktop.MAIN_MONITOR.notifyAll();
---
>             CliWrapper.MAIN_MONITOR.notifyAll();
421,441d380
<     try
<     {
<       while (!display.isDisposed()) {
<         try
<         {
<           if (!display.readAndDispatch()) {
<             display.sleep();
<           }
<         }
<         catch (Throwable e)
<         {
<           log.warn(e.toString(), new Object[] { e });
<           display.sleep();
<         }
<       }
<     }
<     finally
<     {
<       SWTExec.shutdown();
<       System.exit(0);
<     }
452c391
<           CPDesktop.log.info("Restarting service...");
---
>           CliWrapper.log.info("Restarting service...");
460c399
<         CPDesktop.log.info("Connecting to service at " + new Location(host, port));
---
>         CliWrapper.log.info("Connecting to service at " + new Location(host, port));
468c407
<               CPDesktop.log.info("    FAILED on attempt #" + (i - 1) + ", retrying in " + delay + "ms");
---
>               CliWrapper.log.info("    FAILED on attempt #" + (i - 1) + ", retrying in " + delay + "ms");
479c418
<               CPDesktop.log.warn("Unable to establish connection.", new Object[] { e });
---
>               CliWrapper.log.warn("Unable to establish connection.", new Object[] { e });
484c423
<               CPDesktop.log.info("    SUCCESS on attempt #" + i);
---
>               CliWrapper.log.info("    SUCCESS on attempt #" + i);
489c428
<               CPDesktop.log.warn("    FAILED on attempt #" + i + ", aborting because something is seriously wrong.");
---
>               CliWrapper.log.warn("    FAILED on attempt #" + i + ", aborting because something is seriously wrong.");
493c432
<               CPDesktop.log.info("    FAILED on attempt #" + i + ", done");
---
>               CliWrapper.log.info("    FAILED on attempt #" + i + ", done");
511c450
<           CPDesktop.log.error("Interrupted while waiting to connect!");
---
>           CliWrapper.log.error("Interrupted while waiting to connect!");
540c479
<     String localeConfig = (String)getConfigserviceUI.locale.getValue();
---
>     String localeConfig = (String)appModel.getConfigModel().getConfig().serviceUI.locale.getValue();
625,635d563
<     display.asyncExec(new Runnable()
<     {
<       public void run()
<       {
<         CPDesktop self = CPDesktop.this;
<         MainWindow mainWindow = new MainWindow(CPDesktop.display, appModel, services);
<         mainWindow.addListener(listener, new Class[] { MainWindow.Event.AppCloseEvent.class, MainWindow.Event.AppShowEvent.class, AppWindowEvent.WindowReadyEvent.class });
<         
<         new MainWindowController(mainWindow, appModel, services);
<       }
<     });
659c587
<       SystemOut.info(CPDesktop.class, "readLoggingConfiguration", "Log file: " + logfile);
---
>       SystemOut.info(CliWrapper.class, "readLoggingConfiguration", "Log file: " + logfile);
690,697d617
<     CPFont.loadFonts(Display.getDefault(), new Properties());
<   }
<   
<   public static void close()
<   {
<     if (!display.isDisposed()) {
<       display.close();
<     }
705c625
<  */
\ No newline at end of file
---
>  */
